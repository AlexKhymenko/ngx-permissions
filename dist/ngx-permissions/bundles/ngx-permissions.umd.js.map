{"version":3,"file":"ngx-permissions.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-permissions/lib/enums/predefined-strategies.enum.ts","ng://ngx-permissions/lib/store/configuration.store.ts","ng://ngx-permissions/lib/service/configuration.service.ts","ng://ngx-permissions/lib/store/permissions.store.ts","ng://ngx-permissions/lib/utils/utils.ts","ng://ngx-permissions/lib/service/permissions.service.ts","ng://ngx-permissions/lib/store/roles.store.ts","ng://ngx-permissions/lib/service/roles.service.ts","ng://ngx-permissions/lib/directive/permissions.directive.ts","ng://ngx-permissions/lib/router/permissions-guard.service.ts","ng://ngx-permissions/lib/testing/permissions-allow.directive.stub.ts","ng://ngx-permissions/lib/testing/permissions-restrict.directive.stub.ts","ng://ngx-permissions/lib/model/role.model.ts","ng://ngx-permissions/lib/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const NgxPermissionsPredefinedStrategies = {\r\n    REMOVE: 'remove',\r\n    SHOW: 'show'\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Strategy } from '../service/configuration.service';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationStore {\r\n\r\n    public strategiesSource: BehaviorSubject<Strategy> = new BehaviorSubject<Strategy>({});\r\n    public strategies$: Observable<Strategy> = this.strategiesSource.asObservable();\r\n\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\r\nimport { PermissionState } from '../directive/permissions.directive';\r\n\r\nexport type StrategyFunction = (templateRef: TemplateRef<any>, permissions?: PermissionState) => void;\r\n\r\nexport type Strategy = {\r\n    [key: string]: StrategyFunction\r\n};\r\n\r\nexport const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationService {\r\n\r\n    private strategiesSource: BehaviorSubject<Strategy>;\r\n    public strategies$: Observable<Strategy>;\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor(\r\n        @Inject(USE_CONFIGURATION_STORE) private isolate: boolean = false,\r\n        private configurationStore: NgxPermissionsConfigurationStore\r\n    ) {\r\n        this.strategiesSource = this.isolate ? new BehaviorSubject<Strategy>({}) : this.configurationStore.strategiesSource;\r\n        this.strategies$ = this.strategiesSource.asObservable();\r\n\r\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\r\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n\r\n    }\r\n\r\n    public setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public addPermissionStrategy(key: string, func: StrategyFunction): void {\r\n        this.strategiesSource.value[key] = func;\r\n    }\r\n\r\n    public getStrategy(key: string) {\r\n        return this.strategiesSource.value[key];\r\n    }\r\n\r\n    public getAllStrategies() {\r\n        return this.strategiesSource.value;\r\n    }\r\n\r\n    private getDefinedStrategy(name: string | 'remove' | 'show') {\r\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\r\n            return name;\r\n        } else {\r\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\r\n        }\r\n    }\r\n\r\n    private isPredefinedStrategy(strategy: string): boolean {\r\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsStore {\r\n\r\n    public permissionsSource = new BehaviorSubject<{}>({});\r\n    public permissions$: Observable<{}> = this.permissionsSource.asObservable();\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","export function isFunction(functionToCheck: any): functionToCheck is Function {\r\n    let getType = {};\r\n    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';\r\n}\r\n\r\nexport function isPlainObject(value: any): boolean {\r\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\r\n        return false;\r\n    } else {\r\n        let prototype = Object.getPrototypeOf(value);\r\n        return prototype === null || prototype === Object.prototype;\r\n    }\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n    return !!value && typeof value === 'string';\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean {\r\n    return typeof value === 'boolean';\r\n}\r\n\r\nexport function isPromise(promise: any) {\r\n    return Object.prototype.toString.call(promise) === '[object Promise]';\r\n}\r\n\r\nexport function notEmptyValue(value: any): boolean {\r\n    if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n    return !!value;\r\n}\r\n\r\nexport function transformStringToArray(value: any): string[] {\r\n    if (isString(value)) {\r\n        return [value];\r\n    }\r\n    return value;\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, first, map, mergeAll, switchMap, mergeMap } from 'rxjs/operators';\r\n\r\nimport { NgxPermission } from '../model/permission.model';\r\nimport { NgxPermissionsStore } from '../store/permissions.store';\r\n\r\nimport { isBoolean, isFunction, transformStringToArray } from '../utils/utils';\r\n\r\nexport type NgxPermissionsObject = { [name: string]: NgxPermission };\r\n\r\nexport const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsService {\r\n\r\n    private permissionsSource: BehaviorSubject<NgxPermissionsObject>;\r\n    public permissions$: Observable<NgxPermissionsObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_PERMISSIONS_STORE) private isolate: boolean = false,\r\n        private permissionsStore: NgxPermissionsStore\r\n    ) {\r\n        this.permissionsSource = isolate ? new BehaviorSubject<NgxPermissionsObject>({}) : permissionsStore.permissionsSource;\r\n        this.permissions$ = this.permissionsSource.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Remove all permissions from permissions source\r\n     */\r\n    public flushPermissions(): void {\r\n        this.permissionsSource.next({});\r\n    }\r\n\r\n    public hasPermission(permission: string | string[]): Promise<boolean> {\r\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\r\n            return Promise.resolve(true);\r\n        }\r\n\r\n        permission = transformStringToArray(permission);\r\n        return this.hasArrayPermission(permission);\r\n    }\r\n\r\n    public loadPermissions(permissions: string[], validationFunction?: Function): void {\r\n        const newPermissions = permissions.reduce((source, p) =>\r\n            this.reducePermission(source, p, validationFunction)\r\n            , {});\r\n\r\n        this.permissionsSource.next(newPermissions);\r\n    }\r\n\r\n    public addPermission(permission: string | string[], validationFunction?: Function): void {\r\n        if (Array.isArray(permission)) {\r\n            const permissions = permission.reduce((source, p) =>\r\n                this.reducePermission(source, p, validationFunction)\r\n                , this.permissionsSource.value);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        } else {\r\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        }\r\n    }\r\n\r\n    public removePermission(permissionName: string): void {\r\n        const permissions = {\r\n            ...this.permissionsSource.value\r\n        };\r\n        delete permissions[permissionName];\r\n        this.permissionsSource.next(permissions);\r\n    }\r\n\r\n    public getPermission(name: string): NgxPermission {\r\n        return this.permissionsSource.value[name];\r\n    }\r\n\r\n    public getPermissions(): NgxPermissionsObject {\r\n        return this.permissionsSource.value;\r\n    }\r\n\r\n    private reducePermission(\r\n        source: NgxPermissionsObject,\r\n        name: string,\r\n        validationFunction?: Function\r\n    ): NgxPermissionsObject {\r\n        if (!!validationFunction && isFunction(validationFunction)) {\r\n            return {\r\n                ...source,\r\n                [name]: { name, validationFunction }\r\n            };\r\n        } else {\r\n            return {\r\n                ...source,\r\n                [name]: { name }\r\n            };\r\n        }\r\n    }\r\n\r\n    private hasArrayPermission(permissions: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = permissions.map((key) => {\r\n            if (this.hasPermissionValidationFunction(key)) {\r\n                const immutableValue = { ...this.permissionsSource.value };\r\n                const validationFunction: Function = <Function>this.permissionsSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => {\r\n                        return validationFunction(key, immutableValue)\r\n                    }),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => {\r\n                        var b = isBoolean(promise);\r\n                        if (b) {\r\n                            return of(promise as boolean);\r\n                        }\r\n                        else {\r\n                            return promise as Promise<boolean>\r\n                        }\r\n                    }),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            // check for name of the permission if there is no validation function\r\n            return of(!!this.permissionsSource.value[key]);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data) => {\r\n                const r = data !== false;\r\n                return r;\r\n            }, false),\r\n            map((data) => {\r\n                const r = data === false ? false : true;\r\n                return r;\r\n            })\r\n        ).toPromise().then((data: any) => {\r\n            return data;\r\n        });\r\n    }\r\n\r\n    private hasPermissionValidationFunction(key: string): boolean {\r\n        return !!this.permissionsSource.value[key] &&\r\n            !!this.permissionsSource.value[key].validationFunction &&\r\n            isFunction(this.permissionsSource.value[key].validationFunction);\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport class NgxRolesStore {\r\n\r\n    public rolesSource = new BehaviorSubject<{}>({});\r\n\r\n    public roles$: Observable<{}> = this.rolesSource.asObservable();\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgxRole } from '../model/role.model';\r\nimport { NgxRolesStore } from '../store/roles.store';\r\nimport { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';\r\nimport { NgxPermissionsService } from './permissions.service';\r\n\r\nexport const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\r\n\r\nexport type NgxRolesObject = { [name: string]: NgxRole };\r\n\r\n@Injectable()\r\nexport class NgxRolesService {\r\n\r\n    private rolesSource: BehaviorSubject<NgxRolesObject>;\r\n\r\n    public roles$: Observable<NgxRolesObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_ROLES_STORE) private isolate: boolean = false,\r\n        private rolesStore: NgxRolesStore,\r\n        private permissionsService: NgxPermissionsService\r\n    ) {\r\n        this.rolesSource = this.isolate ? new BehaviorSubject<NgxRolesObject>({}) : this.rolesStore.rolesSource;\r\n        this.roles$ = this.rolesSource.asObservable();\r\n    }\r\n\r\n    public addRole(name: string, validationFunction: Function | string[]) {\r\n        const roles = {\r\n            ...this.rolesSource.value,\r\n            [name]: {name, validationFunction}\r\n        };\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public addRoles(rolesObj: { [name: string]: Function | string[] }) {\r\n        Object.keys(rolesObj).forEach((key, index) => {\r\n            this.addRole(key, rolesObj[key]);\r\n        });\r\n    }\r\n\r\n    public flushRoles() {\r\n        this.rolesSource.next({});\r\n    }\r\n\r\n    public removeRole(roleName: string) {\r\n        let roles = {\r\n            ...this.rolesSource.value\r\n        };\r\n        delete roles[roleName];\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public getRoles() {\r\n        return this.rolesSource.value;\r\n    }\r\n\r\n    public getRole(name: string) {\r\n        return this.rolesSource.value[name];\r\n    }\r\n\r\n    public hasOnlyRoles(names: string | string[]): Promise<boolean> {\r\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\r\n\r\n        if (isNamesEmpty) return Promise.resolve(true);\r\n\r\n        names = transformStringToArray(names);\r\n\r\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\r\n            .then(([hasRoles, hasPermissions]: [boolean, boolean]) => {\r\n                return hasRoles || hasPermissions;\r\n            });\r\n    }\r\n\r\n    private hasRoleKey(roleName: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = roleName.map((key) => {\r\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\r\n                                          !!this.rolesSource.value[key].validationFunction &&\r\n                                          isFunction(this.rolesSource.value[key].validationFunction);\r\n\r\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\r\n                const validationFunction: Function = <Function>this.rolesSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => validationFunction()),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\r\n                        of(promise as boolean) : promise as Promise<boolean>),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            return of(false);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data: any) => data !== false, false),\r\n            map((data) => data !== false)\r\n        ).toPromise().then((data: any) => data);\r\n    }\r\n\r\n    private hasRolePermission(roles: NgxRolesObject, roleNames: string[]): Promise<boolean> {\r\n        return from(roleNames).pipe(\r\n            mergeMap((key) => {\r\n                if (roles[key] && Array.isArray(roles[key].validationFunction)) {\r\n                    return from(<string[]>roles[key].validationFunction).pipe(\r\n                        mergeMap((permission) => this.permissionsService.hasPermission(permission)),\r\n                        every((hasPermissions) => hasPermissions === true)\r\n                    );\r\n                }\r\n\r\n                return of(false);\r\n            }),\r\n            first((hasPermission) => hasPermission === true, false)\r\n        ).toPromise();\r\n    }\r\n\r\n}\r\n","import {\r\n    ChangeDetectorRef,\r\n    Directive,\r\n    EventEmitter,\r\n    Input, OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output, SimpleChanges,\r\n    TemplateRef,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { merge, Subscription, from } from 'rxjs';\r\nimport { skip, take, mergeAll, first, map } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isBoolean, isFunction, isString, notEmptyValue, transformStringToArray } from '../utils/utils';\r\nimport { isArray } from 'util';\r\n\r\n// Struct. to keep directive track of permissions states\r\nexport type PermissionState = { [permission: string]: { hasPermission: boolean, hasRole: boolean } }\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter<PermissionState>();\r\n    @Output() permissionsUnauthorized = new EventEmitter<PermissionState>();\r\n\r\n    private initPermissionSubscription: Subscription;\r\n    // skip first run cause merge will fire twice\r\n    private firstMergeUnusedRun = 1;\r\n    private currentAuthorizedState: boolean;\r\n    private permissionsState: PermissionState;\r\n\r\n    constructor(\r\n        private permissionsService: NgxPermissionsService,\r\n        private configurationService: NgxPermissionsConfigurationService,\r\n        private rolesService: NgxRolesService,\r\n        private viewContainer: ViewContainerRef,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private templateRef: TemplateRef<any>\r\n    ) {\r\n        this.permissionsState = {};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\r\n    }\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const onlyChanges = changes['ngxPermissionsOnly'];\r\n        const exceptChanges = changes['ngxPermissionsExcept'];\r\n        if (onlyChanges || exceptChanges) {\r\n            // Due to bug when you pass empty array\r\n            if (onlyChanges && onlyChanges.firstChange) return;\r\n            if (exceptChanges && exceptChanges.firstChange) return;\r\n\r\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\r\n                .subscribe(() => {\r\n                    if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                        this.validateExceptAndOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                        this.validateOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n                });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initPermissionSubscription) {\r\n            this.initPermissionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    private validateExceptOnlyPermissions(): Subscription {\r\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n            .pipe(skip(this.firstMergeUnusedRun))\r\n            .subscribe(() => {\r\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                    this.validateExceptAndOnlyPermissions();\r\n                    return;\r\n                }\r\n\r\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                    this.validateOnlyPermissions();\r\n                    return;\r\n                }\r\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n            });\r\n    }\r\n\r\n    private validateExceptAndOnlyPermissions(): void {\r\n        this.getPermissions(this.ngxPermissionsExcept)\r\n            .then((hasPermission: boolean) => {\r\n                if (hasPermission) {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\r\n                    return;\r\n                }\r\n                if (!!this.ngxPermissionsOnly) throw false;\r\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n            })\r\n            .catch(() => {\r\n                if (!!this.ngxPermissionsOnly) {\r\n                    this.validateOnlyPermissions();\r\n                } else {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n                }\r\n            });\r\n    }\r\n\r\n    private validateOnlyPermissions(): void {\r\n        // Validate permissions & store permission state\r\n        this.getPermissions(this.ngxPermissionsOnly)\r\n            .then((hasPermission: boolean) => {\r\n                if (hasPermission) {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\r\n                } else {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n            });\r\n    }\r\n\r\n    private handleUnauthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = false;\r\n        this.permissionsUnauthorized.emit(this.permissionsState);\r\n\r\n        if (this.getUnAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n\r\n    }\r\n\r\n    private handleAuthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = true;\r\n        this.permissionsAuthorized.emit(this.permissionsState);\r\n\r\n        if (this.getAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n    }\r\n\r\n    private applyStrategyAccordingToStrategyType(strategy: string | Function): void {\r\n        if (isString(strategy)) {\r\n            this.applyStrategy(strategy);\r\n            return;\r\n        }\r\n\r\n        if (isFunction(strategy)) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            (strategy as Function)(this.templateRef, this.permissionsState);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private showTemplateBlockInView(template: TemplateRef<any>): void {\r\n        this.viewContainer.clear();\r\n        if (!template) {\r\n            return;\r\n        }\r\n\r\n        this.viewContainer.createEmbeddedView(template);\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    private getAuthorisedTemplates(): TemplateRef<any> {\r\n        return this.ngxPermissionsOnlyThen\r\n            || this.ngxPermissionsExceptThen\r\n            || this.ngxPermissionsThen\r\n            || this.templateRef;\r\n    }\r\n\r\n    private elseBlockDefined(): boolean {\r\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\r\n    }\r\n\r\n    private thenBlockDefined() {\r\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\r\n    }\r\n\r\n    private getAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\r\n            this.ngxPermissionsExceptAuthorisedStrategy ||\r\n            this.ngxPermissionsAuthorisedStrategy;\r\n    }\r\n\r\n    private getUnAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\r\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\r\n            this.ngxPermissionsUnauthorisedStrategy;\r\n    }\r\n\r\n    private applyStrategy(str: any) {\r\n        if (str === NgxPermissionsPredefinedStrategies.SHOW) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            return;\r\n        }\r\n\r\n        if (str === NgxPermissionsPredefinedStrategies.REMOVE) {\r\n            this.viewContainer.clear();\r\n            return;\r\n        }\r\n        const strategy = this.configurationService.getStrategy(str);\r\n        this.showTemplateBlockInView(this.templateRef);\r\n\r\n        strategy(this.templateRef, this.permissionsState);\r\n    }\r\n\r\n    /**\r\n     * Check permission service against parameter \"neddedPermissions\"\r\n     * then update this class property \"permissionsState\"\r\n     * \r\n     * @param neddedPermissions Sets the permissions/roles to check (i.e ngxPermissionsOnly)\r\n     */\r\n    private getPermissions(neddedPermissions: string | string[]): Promise<boolean> {\r\n\r\n        // Ensure we work with array\r\n        var requestedPermissions: Array<string> = transformStringToArray(neddedPermissions)\r\n\r\n        // Array of promises that request permission and roles service with \"permission\"\r\n        var promises: Promise<boolean>[] = []\r\n\r\n        // Reset \"permissions state\" directive class property\r\n        this.permissionsState = {}\r\n\r\n        if (isArray(requestedPermissions)) {\r\n            requestedPermissions.forEach((value) => {\r\n                this.permissionsState[value] = { hasPermission: false, hasRole: false }\r\n\r\n                // Check if has \"Permission\"\r\n                promises.push(\r\n                    this.permissionsService.hasPermission(value)\r\n                        .then((hasPermission) => {\r\n                            this.permissionsState[value].hasPermission = hasPermission\r\n                            return hasPermission;\r\n                        })\r\n                        .catch(() => false)\r\n                )\r\n                // Check if has \"Role\"\r\n                promises.push(\r\n                    this.rolesService.hasOnlyRoles(value)\r\n                        .then((hasPermission) => {\r\n                            this.permissionsState[value].hasRole = hasPermission\r\n                            return hasPermission;\r\n                        })\r\n                        .catch(() => false)\r\n                )\r\n            })\r\n        }\r\n\r\n        /** \r\n         * Return result :\r\n         * true : At least one of neededPermission exists in permission or role service (@see this.permissionsState to get a full detail on wich permission is true/false)\r\n         * false : none of neededPermission exists in  permission or role service\r\n        */\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((hasPermission: boolean) => {\r\n                return hasPermission === true;\r\n            }, false),\r\n            map((hasPermission) => {\r\n                return hasPermission;\r\n            })\r\n        ).toPromise().then((hasPermission: boolean) => {\r\n            return hasPermission\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    CanActivate,\r\n    CanActivateChild,\r\n    CanLoad,\r\n    NavigationExtras,\r\n    Route,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { forkJoin, from, Observable, of } from 'rxjs';\r\nimport { first, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsRouterData } from '../model/permissions-router-data.model';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';\r\n\r\ninterface NgxRedirectToNavigationParameters {\r\n    navigationCommands: any[] | Function;\r\n    navigationExtras?: NavigationExtras | Function;\r\n}\r\n\r\n@Injectable()\r\nexport class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\r\n\r\n    constructor(private permissionsService: NgxPermissionsService, private  rolesService: NgxRolesService, private router: Router) {\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\r\n        return this.hasPermissions(route, state);\r\n    }\r\n\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n        return this.hasPermissions(childRoute, state);\r\n    }\r\n\r\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\r\n        return this.hasPermissions(route);\r\n    }\r\n\r\n    private hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        const purePermissions = !!route && route.data ? route.data['permissions'] as NgxPermissionsRouterData : {};\r\n        let permissions: NgxPermissionsRouterData = this.transformPermission(purePermissions, route, state);\r\n\r\n        if (this.isParameterAvailable(permissions.except)) {\r\n            return this.passingExceptPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        if (this.isParameterAvailable(permissions.only)) {\r\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private transformPermission(purePermissions: NgxPermissionsRouterData, route: any, state: any): any {\r\n        let permissions = {\r\n            ...purePermissions\r\n        };\r\n\r\n        if (isFunction(permissions.except)) {\r\n            permissions.except = (permissions.except as Function)(route, state);\r\n        }\r\n\r\n        if (isFunction(permissions.only)) {\r\n            permissions.only = (permissions.only as Function)(route, state);\r\n        }\r\n\r\n        permissions.except = transformStringToArray(permissions.except);\r\n        permissions.only = transformStringToArray(permissions.only);\r\n\r\n        return permissions;\r\n    }\r\n\r\n    private isParameterAvailable(permission: any) {\r\n        return !!(permission) && permission.length > 0;\r\n    }\r\n\r\n    private passingExceptPermissionsValidation(permissions: NgxPermissionsRouterData, route: any, state: any) {\r\n        if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(\r\n            permissions.redirectTo)))) {\r\n            let failedPermission = '';\r\n\r\n            return from(permissions.except as any[]).pipe(\r\n                mergeMap((data) => {\r\n                    return forkJoin([\r\n                        this.permissionsService.hasPermission(<string | string[]>data),\r\n                        this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                    ]).pipe(tap((hasPermissions: boolean[]) => {\r\n                        const dontHavePermissions = hasPermissions.every((data) => data === false);\r\n\r\n                        if (!dontHavePermissions) {\r\n                            failedPermission = data;\r\n                        }\r\n                    }));\r\n                }),\r\n                first((data: any) => data.some((data: boolean) => data === true), false),\r\n                mergeMap((isAllFalse) => {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n\r\n                        return of(false);\r\n                    }\r\n\r\n                    if (!isAllFalse && permissions.only) {\r\n                        return this.onlyRedirectCheck(permissions, route, state);\r\n                    }\r\n\r\n                    return of(!isAllFalse);\r\n                })\r\n            ).toPromise();\r\n        }\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.except), this.rolesService.hasOnlyRoles(<string | string[]>permissions.except)])\r\n            .then(([hasPermission, hasRoles]) => {\r\n                if (hasPermission || hasRoles) {\r\n                    if (permissions.redirectTo) {\r\n                        this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n\r\n                if (permissions.only) {\r\n                    return this.checkOnlyPermissions(permissions, route, state);\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private redirectToAnotherRoute(redirectTo: string | any[] | NgxRedirectToNavigationParameters | Function,\r\n                                   route: ActivatedRouteSnapshot | Route,\r\n                                   state?: RouterStateSnapshot,\r\n                                   failedPermissionName?: string) {\r\n\r\n        if (isFunction(redirectTo)) {\r\n            redirectTo = (redirectTo as Function)(failedPermissionName, route, state);\r\n        }\r\n\r\n        if (this.isRedirectionWithParameters(redirectTo)) {\r\n            if (this.hasNavigationExtrasAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationExtras = ((<NgxRedirectToNavigationParameters>redirectTo).navigationExtras as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            if (this.hasNavigationCommandsAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationCommands = ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            this.router.navigate(\r\n                ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as any[]),\r\n                ((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras as NavigationExtras)\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(redirectTo)) {\r\n            this.router.navigate(redirectTo);\r\n        } else {\r\n            this.router.navigate([redirectTo]);\r\n        }\r\n    }\r\n\r\n    private isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): boolean {\r\n        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);\r\n    }\r\n\r\n    private hasNavigationExtrasAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationExtras &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras);\r\n    }\r\n\r\n    private hasNavigationCommandsAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationCommands &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationCommands);\r\n    }\r\n\r\n    private onlyRedirectCheck(permissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean> {\r\n        let failedPermission = '';\r\n\r\n        return from(permissions.only).pipe(\r\n            mergeMap((data: any) => {\r\n                return forkJoin([\r\n                    this.permissionsService.hasPermission(<string | string[]>data),\r\n                    this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                ]).pipe(\r\n                    tap((hasPermission: boolean[]) => {\r\n                        const failed = hasPermission.every((data) => data === false);\r\n\r\n                        if (failed) {\r\n                            failedPermission = data;\r\n                        }\r\n                    })\r\n                );\r\n            }),\r\n            first(\r\n                (data: any) => {\r\n                    if (isFunction(permissions.redirectTo)) {\r\n                        return data.some((data: boolean) => data === true);\r\n                    }\r\n\r\n                    return data.every((data: boolean) => data === false);\r\n                },\r\n                false\r\n            ),\r\n            mergeMap((pass: boolean): Observable<boolean> => {\r\n                if (isFunction(permissions.redirectTo)) {\r\n                    if (pass) {\r\n                        return of(true);\r\n                    } else {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                        return of(false);\r\n                    }\r\n                } else {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                    }\r\n                    return of(!pass);\r\n                }\r\n            })\r\n        ).toPromise();\r\n    }\r\n\r\n    private handleRedirectOfFailedPermission(\r\n        permissions: any,\r\n        failedPermission: string,\r\n        route: ActivatedRouteSnapshot | Route,\r\n        state?: RouterStateSnapshot\r\n    ) {\r\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\r\n            this.redirectToAnotherRoute((<any>permissions.redirectTo)[failedPermission], route, state, failedPermission);\r\n        } else {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo), route, state, failedPermission);\r\n            } else {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo)['default'], route, state, failedPermission);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFailedPermissionPropertyOfRedirectTo(permissions: any, failedPermission: string) {\r\n        return !!permissions.redirectTo && permissions.redirectTo[<any>failedPermission];\r\n    }\r\n\r\n    private checkOnlyPermissions(purePermissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        let permissions: NgxPermissionsRouterData = {\r\n            ...purePermissions\r\n        };\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.only), this.rolesService.hasOnlyRoles(<string | string[]>permissions.only)])\r\n            .then(([hasPermission, hasRole]) => {\r\n                if (hasPermission || hasRole) return true;\r\n\r\n                if (permissions.redirectTo) {\r\n                    this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                }\r\n\r\n                return false;\r\n            });\r\n    }\r\n\r\n    private passingOnlyPermissionsValidation(permissions: NgxPermissionsRouterData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        if ((isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {\r\n            return this.onlyRedirectCheck(permissions, route, state)\r\n        }\r\n        return this.checkOnlyPermissions(permissions, route, state);\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsAllowStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef,\r\n                private templateRef: TemplateRef<any>) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyThen ||\r\n            this.ngxPermissionsExceptThen ||\r\n            this.ngxPermissionsThen ||\r\n            this.templateRef;\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsRestrictStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        if (this.getUnAuthorizedTemplate()) {\r\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\r\n        }\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getUnAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyElse ||\r\n            this.ngxPermissionsExceptElse ||\r\n            this.ngxPermissionsElse;\r\n    }\r\n\r\n}\r\n","export class NgxRole {\r\n    name: string;\r\n    validationFunction: Function | string[];\r\n\r\n    constructor(name: string, validationFunction: Function | string[]) {\r\n        this.name = name;\r\n        this.validationFunction = validationFunction;\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgxPermissionsDirective } from './directive/permissions.directive';\r\nimport { NgxPermissionsService, USE_PERMISSIONS_STORE } from './service/permissions.service';\r\nimport { NgxPermissionsGuard } from './router/permissions-guard.service';\r\nimport { NgxRolesService, USE_ROLES_STORE } from './service/roles.service';\r\nimport { NgxPermissionsStore } from './store/permissions.store';\r\nimport { NgxRolesStore } from './store/roles.store';\r\nimport { NgxPermissionsAllowStubDirective } from './testing/permissions-allow.directive.stub';\r\nimport { NgxPermissionsRestrictStubDirective } from './testing/permissions-restrict.directive.stub';\r\nimport { NgxPermissionsConfigurationService, USE_CONFIGURATION_STORE } from './service/configuration.service';\r\nimport { NgxPermissionsConfigurationStore } from './store/configuration.store';\r\n\r\nexport * from './store/roles.store'\r\nexport * from './store/permissions.store'\r\nexport * from './store/configuration.store'\r\n\r\nexport * from './directive/permissions.directive';\r\n\r\nexport * from './service/permissions.service';\r\nexport * from './service/roles.service';\r\nexport * from './service/configuration.service';\r\n\r\nexport * from './router/permissions-guard.service';\r\n\r\nexport * from './model/permissions-router-data.model'\r\nexport * from './model/role.model'\r\n\r\nexport * from './testing/permissions-allow.directive.stub'\r\nexport * from './testing/permissions-restrict.directive.stub'\r\n\r\nexport * from './enums/predefined-strategies.enum'\r\n\r\nexport interface NgxPermissionsModuleConfig {\r\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\r\n    rolesIsolate?: boolean;\r\n    permissionsIsolate?: boolean;\r\n    configurationIsolate?: boolean\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsModule {\r\n    static forRoot(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                NgxPermissionsStore,\r\n                NgxRolesStore,\r\n                NgxPermissionsConfigurationStore,\r\n                NgxPermissionsService,\r\n                NgxPermissionsGuard,\r\n                NgxRolesService,\r\n                NgxPermissionsConfigurationService,\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forChild(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n                NgxPermissionsConfigurationService,\r\n                NgxPermissionsService,\r\n                NgxRolesService,\r\n                NgxPermissionsGuard\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsAllowStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsAllowStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsAllowStubModule {\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsRestrictStubModule {\r\n}\r\n\r\n\r\n"],"names":["BehaviorSubject","Injectable","InjectionToken","Inject","of","map","switchMap","catchError","from","mergeAll","first","mergeMap","every","EventEmitter","merge","skip","take","isArray","Directive","ViewContainerRef","ChangeDetectorRef","TemplateRef","Input","Output","forkJoin","tap","Router","NgModule"],"mappings":"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"}