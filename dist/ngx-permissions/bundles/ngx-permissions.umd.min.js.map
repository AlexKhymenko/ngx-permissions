{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-permissions/lib/enums/predefined-strategies.enum.ts","ng://ngx-permissions/lib/store/configuration.store.ts","ng://ngx-permissions/lib/service/configuration.service.ts","ng://ngx-permissions/lib/store/permissions.store.ts","ng://ngx-permissions/lib/utils/utils.ts","ng://ngx-permissions/lib/service/permissions.service.ts","ng://ngx-permissions/lib/store/roles.store.ts","ng://ngx-permissions/lib/service/roles.service.ts","ng://ngx-permissions/lib/directive/permissions.directive.ts","ng://ngx-permissions/lib/router/permissions-guard.service.ts","ng://ngx-permissions/lib/testing/permissions-allow.directive.stub.ts","ng://ngx-permissions/lib/testing/permissions-restrict.directive.stub.ts","ng://ngx-permissions/lib/model/role.model.ts","ng://ngx-permissions/lib/index.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","NgxPermissionsPredefinedStrategies","REMOVE","SHOW","NgxPermissionsConfigurationStore","strategiesSource","BehaviorSubject","strategies$","asObservable","Injectable","USE_CONFIGURATION_STORE","InjectionToken","NgxPermissionsConfigurationService","isolate","configurationStore","onAuthorisedDefaultStrategy","undefined","onUnAuthorisedDefaultStrategy","setDefaultOnAuthorizedStrategy","name","getDefinedStrategy","setDefaultOnUnauthorizedStrategy","addPermissionStrategy","key","func","getStrategy","getAllStrategies","isPredefinedStrategy","Error","strategy","Inject","args","NgxPermissionsStore","permissionsSource","permissions$","isFunction","functionToCheck","Function","toString","isPlainObject","getPrototypeOf","isString","isBoolean","notEmptyValue","Array","isArray","transformStringToArray","USE_PERMISSIONS_STORE","NgxPermissionsService","permissionsStore","flushPermissions","hasPermission","permission","Promise","resolve","hasArrayPermission","loadPermissions","permissions","validationFunction","_this","newPermissions","reduce","source","reducePermission","addPermission","removePermission","permissionName","getPermission","getPermissions","_a","_b","promises","map","hasPermissionValidationFunction","immutableValue_1","validationFunction_1","of","pipe","switchMap","promise","catchError","from","mergeAll","first","data","toPromise","then","NgxRolesStore","rolesSource","roles$","USE_ROLES_STORE","NgxRolesService","rolesStore","permissionsService","addRole","roles","addRoles","rolesObj","keys","forEach","index","flushRoles","removeRole","roleName","getRoles","getRole","hasOnlyRoles","names","all","hasRoleKey","hasRolePermission","hasRoles","hasPermissions","roleNames","mergeMap","every","NgxPermissionsDirective","configurationService","rolesService","viewContainer","changeDetector","templateRef","permissionsAuthorized","EventEmitter","permissionsUnauthorized","firstMergeUnusedRun","permissionsState","ngOnInit","clear","initPermissionSubscription","validateExceptOnlyPermissions","ngOnChanges","changes","onlyChanges","exceptChanges","firstChange","merge","skip","take","subscribe","ngxPermissionsExcept","validateExceptAndOnlyPermissions","ngxPermissionsOnly","validateOnlyPermissions","handleAuthorisedPermission","getAuthorisedTemplates","ngOnDestroy","unsubscribe","handleUnauthorisedPermission","ngxPermissionsExceptElse","ngxPermissionsElse","ngxPermissionsExceptThen","ngxPermissionsThen","catch","ngxPermissionsOnlyThen","ngxPermissionsOnlyElse","template","currentAuthorizedState","emit","getUnAuthorizedStrategyInput","applyStrategyAccordingToStrategyType","elseBlockDefined","applyStrategy","showTemplateBlockInView","getAuthorizedStrategyInput","thenBlockDefined","createEmbeddedView","markForCheck","ngxPermissionsOnlyAuthorisedStrategy","ngxPermissionsExceptAuthorisedStrategy","ngxPermissionsAuthorisedStrategy","ngxPermissionsOnlyUnauthorisedStrategy","ngxPermissionsExceptUnauthorisedStrategy","ngxPermissionsUnauthorisedStrategy","str","neddedPermissions","requestedPermissions","hasRole","Directive","selector","ViewContainerRef","ChangeDetectorRef","TemplateRef","Input","Output","NgxPermissionsGuard","router","canActivate","route","state","canActivateChild","childRoute","canLoad","purePermissions","transformPermission","isParameterAvailable","except","passingExceptPermissionsValidation","only","passingOnlyPermissionsValidation","redirectTo","isRedirectionWithParameters","failedPermission_1","forkJoin","tap","some","isAllFalse","handleRedirectOfFailedPermission","onlyRedirectCheck","redirectToAnotherRoute","checkOnlyPermissions","failedPermissionName","hasNavigationExtrasAsFunction","navigationExtras","hasNavigationCommandsAsFunction","navigationCommands","navigate","object","failedPermission","pass","isFailedPermissionPropertyOfRedirectTo","Router","NgxPermissionsAllowStubDirective","getAuthorizedTemplate","NgxPermissionsRestrictStubDirective","getUnAuthorizedTemplate","NgxRole","NgxPermissionsModule","forRoot","config","ngModule","providers","provide","useValue","permissionsIsolate","rolesIsolate","configurationIsolate","forChild","NgModule","imports","declarations","exports","NgxPermissionsAllowStubModule","NgxPermissionsRestrictStubModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const NgxPermissionsPredefinedStrategies = {\r\n    REMOVE: 'remove',\r\n    SHOW: 'show'\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Strategy } from '../service/configuration.service';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationStore {\r\n\r\n    public strategiesSource: BehaviorSubject<Strategy> = new BehaviorSubject<Strategy>({});\r\n    public strategies$: Observable<Strategy> = this.strategiesSource.asObservable();\r\n\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\r\nimport { PermissionState } from '../directive/permissions.directive';\r\n\r\nexport type StrategyFunction = (templateRef: TemplateRef<any>, permissions?: PermissionState) => void;\r\n\r\nexport type Strategy = {\r\n    [key: string]: StrategyFunction\r\n};\r\n\r\nexport const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationService {\r\n\r\n    private strategiesSource: BehaviorSubject<Strategy>;\r\n    public strategies$: Observable<Strategy>;\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor(\r\n        @Inject(USE_CONFIGURATION_STORE) private isolate: boolean = false,\r\n        private configurationStore: NgxPermissionsConfigurationStore\r\n    ) {\r\n        this.strategiesSource = this.isolate ? new BehaviorSubject<Strategy>({}) : this.configurationStore.strategiesSource;\r\n        this.strategies$ = this.strategiesSource.asObservable();\r\n\r\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\r\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n\r\n    }\r\n\r\n    public setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public addPermissionStrategy(key: string, func: StrategyFunction): void {\r\n        this.strategiesSource.value[key] = func;\r\n    }\r\n\r\n    public getStrategy(key: string) {\r\n        return this.strategiesSource.value[key];\r\n    }\r\n\r\n    public getAllStrategies() {\r\n        return this.strategiesSource.value;\r\n    }\r\n\r\n    private getDefinedStrategy(name: string | 'remove' | 'show') {\r\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\r\n            return name;\r\n        } else {\r\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\r\n        }\r\n    }\r\n\r\n    private isPredefinedStrategy(strategy: string): boolean {\r\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsStore {\r\n\r\n    public permissionsSource = new BehaviorSubject<{}>({});\r\n    public permissions$: Observable<{}> = this.permissionsSource.asObservable();\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","export function isFunction(functionToCheck: any): functionToCheck is Function {\r\n    let getType = {};\r\n    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';\r\n}\r\n\r\nexport function isPlainObject(value: any): boolean {\r\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\r\n        return false;\r\n    } else {\r\n        let prototype = Object.getPrototypeOf(value);\r\n        return prototype === null || prototype === Object.prototype;\r\n    }\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n    return !!value && typeof value === 'string';\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean {\r\n    return typeof value === 'boolean';\r\n}\r\n\r\nexport function isPromise(promise: any) {\r\n    return Object.prototype.toString.call(promise) === '[object Promise]';\r\n}\r\n\r\nexport function notEmptyValue(value: any): boolean {\r\n    if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n    return !!value;\r\n}\r\n\r\nexport function transformStringToArray(value: any): string[] {\r\n    if (isString(value)) {\r\n        return [value];\r\n    }\r\n    return value;\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, first, map, mergeAll, switchMap, mergeMap } from 'rxjs/operators';\r\n\r\nimport { NgxPermission } from '../model/permission.model';\r\nimport { NgxPermissionsStore } from '../store/permissions.store';\r\n\r\nimport { isBoolean, isFunction, transformStringToArray } from '../utils/utils';\r\n\r\nexport type NgxPermissionsObject = { [name: string]: NgxPermission };\r\n\r\nexport const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsService {\r\n\r\n    private permissionsSource: BehaviorSubject<NgxPermissionsObject>;\r\n    public permissions$: Observable<NgxPermissionsObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_PERMISSIONS_STORE) private isolate: boolean = false,\r\n        private permissionsStore: NgxPermissionsStore\r\n    ) {\r\n        this.permissionsSource = isolate ? new BehaviorSubject<NgxPermissionsObject>({}) : permissionsStore.permissionsSource;\r\n        this.permissions$ = this.permissionsSource.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Remove all permissions from permissions source\r\n     */\r\n    public flushPermissions(): void {\r\n        this.permissionsSource.next({});\r\n    }\r\n\r\n    public hasPermission(permission: string | string[]): Promise<boolean> {\r\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\r\n            return Promise.resolve(true);\r\n        }\r\n\r\n        permission = transformStringToArray(permission);\r\n        return this.hasArrayPermission(permission);\r\n    }\r\n\r\n    public loadPermissions(permissions: string[], validationFunction?: Function): void {\r\n        const newPermissions = permissions.reduce((source, p) =>\r\n            this.reducePermission(source, p, validationFunction)\r\n            , {});\r\n\r\n        this.permissionsSource.next(newPermissions);\r\n    }\r\n\r\n    public addPermission(permission: string | string[], validationFunction?: Function): void {\r\n        if (Array.isArray(permission)) {\r\n            const permissions = permission.reduce((source, p) =>\r\n                this.reducePermission(source, p, validationFunction)\r\n                , this.permissionsSource.value);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        } else {\r\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        }\r\n    }\r\n\r\n    public removePermission(permissionName: string): void {\r\n        const permissions = {\r\n            ...this.permissionsSource.value\r\n        };\r\n        delete permissions[permissionName];\r\n        this.permissionsSource.next(permissions);\r\n    }\r\n\r\n    public getPermission(name: string): NgxPermission {\r\n        return this.permissionsSource.value[name];\r\n    }\r\n\r\n    public getPermissions(): NgxPermissionsObject {\r\n        return this.permissionsSource.value;\r\n    }\r\n\r\n    private reducePermission(\r\n        source: NgxPermissionsObject,\r\n        name: string,\r\n        validationFunction?: Function\r\n    ): NgxPermissionsObject {\r\n        if (!!validationFunction && isFunction(validationFunction)) {\r\n            return {\r\n                ...source,\r\n                [name]: { name, validationFunction }\r\n            };\r\n        } else {\r\n            return {\r\n                ...source,\r\n                [name]: { name }\r\n            };\r\n        }\r\n    }\r\n\r\n    private hasArrayPermission(permissions: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = permissions.map((key) => {\r\n            if (this.hasPermissionValidationFunction(key)) {\r\n                const immutableValue = { ...this.permissionsSource.value };\r\n                const validationFunction: Function = <Function>this.permissionsSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => {\r\n                        return validationFunction(key, immutableValue)\r\n                    }),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => {\r\n                        var b = isBoolean(promise);\r\n                        if (b) {\r\n                            return of(promise as boolean);\r\n                        }\r\n                        else {\r\n                            return promise as Promise<boolean>\r\n                        }\r\n                    }),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            // check for name of the permission if there is no validation function\r\n            return of(!!this.permissionsSource.value[key]);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data) => {\r\n                const r = data !== false;\r\n                return r;\r\n            }, false),\r\n            map((data) => {\r\n                const r = data === false ? false : true;\r\n                return r;\r\n            })\r\n        ).toPromise().then((data: any) => {\r\n            return data;\r\n        });\r\n    }\r\n\r\n    private hasPermissionValidationFunction(key: string): boolean {\r\n        return !!this.permissionsSource.value[key] &&\r\n            !!this.permissionsSource.value[key].validationFunction &&\r\n            isFunction(this.permissionsSource.value[key].validationFunction);\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport class NgxRolesStore {\r\n\r\n    public rolesSource = new BehaviorSubject<{}>({});\r\n\r\n    public roles$: Observable<{}> = this.rolesSource.asObservable();\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgxRole } from '../model/role.model';\r\nimport { NgxRolesStore } from '../store/roles.store';\r\nimport { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';\r\nimport { NgxPermissionsService } from './permissions.service';\r\n\r\nexport const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\r\n\r\nexport type NgxRolesObject = { [name: string]: NgxRole };\r\n\r\n@Injectable()\r\nexport class NgxRolesService {\r\n\r\n    private rolesSource: BehaviorSubject<NgxRolesObject>;\r\n\r\n    public roles$: Observable<NgxRolesObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_ROLES_STORE) private isolate: boolean = false,\r\n        private rolesStore: NgxRolesStore,\r\n        private permissionsService: NgxPermissionsService\r\n    ) {\r\n        this.rolesSource = this.isolate ? new BehaviorSubject<NgxRolesObject>({}) : this.rolesStore.rolesSource;\r\n        this.roles$ = this.rolesSource.asObservable();\r\n    }\r\n\r\n    public addRole(name: string, validationFunction: Function | string[]) {\r\n        const roles = {\r\n            ...this.rolesSource.value,\r\n            [name]: {name, validationFunction}\r\n        };\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public addRoles(rolesObj: { [name: string]: Function | string[] }) {\r\n        Object.keys(rolesObj).forEach((key, index) => {\r\n            this.addRole(key, rolesObj[key]);\r\n        });\r\n    }\r\n\r\n    public flushRoles() {\r\n        this.rolesSource.next({});\r\n    }\r\n\r\n    public removeRole(roleName: string) {\r\n        let roles = {\r\n            ...this.rolesSource.value\r\n        };\r\n        delete roles[roleName];\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public getRoles() {\r\n        return this.rolesSource.value;\r\n    }\r\n\r\n    public getRole(name: string) {\r\n        return this.rolesSource.value[name];\r\n    }\r\n\r\n    public hasOnlyRoles(names: string | string[]): Promise<boolean> {\r\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\r\n\r\n        if (isNamesEmpty) return Promise.resolve(true);\r\n\r\n        names = transformStringToArray(names);\r\n\r\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\r\n            .then(([hasRoles, hasPermissions]: [boolean, boolean]) => {\r\n                return hasRoles || hasPermissions;\r\n            });\r\n    }\r\n\r\n    private hasRoleKey(roleName: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = roleName.map((key) => {\r\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\r\n                                          !!this.rolesSource.value[key].validationFunction &&\r\n                                          isFunction(this.rolesSource.value[key].validationFunction);\r\n\r\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\r\n                const validationFunction: Function = <Function>this.rolesSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => validationFunction()),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\r\n                        of(promise as boolean) : promise as Promise<boolean>),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            return of(false);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data: any) => data !== false, false),\r\n            map((data) => data !== false)\r\n        ).toPromise().then((data: any) => data);\r\n    }\r\n\r\n    private hasRolePermission(roles: NgxRolesObject, roleNames: string[]): Promise<boolean> {\r\n        return from(roleNames).pipe(\r\n            mergeMap((key) => {\r\n                if (roles[key] && Array.isArray(roles[key].validationFunction)) {\r\n                    return from(<string[]>roles[key].validationFunction).pipe(\r\n                        mergeMap((permission) => this.permissionsService.hasPermission(permission)),\r\n                        every((hasPermissions) => hasPermissions === true)\r\n                    );\r\n                }\r\n\r\n                return of(false);\r\n            }),\r\n            first((hasPermission) => hasPermission === true, false)\r\n        ).toPromise();\r\n    }\r\n\r\n}\r\n","import {\r\n    ChangeDetectorRef,\r\n    Directive,\r\n    EventEmitter,\r\n    Input, OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output, SimpleChanges,\r\n    TemplateRef,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { merge, Subscription, from } from 'rxjs';\r\nimport { skip, take, mergeAll, first, map } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isBoolean, isFunction, isString, notEmptyValue, transformStringToArray } from '../utils/utils';\r\nimport { isArray } from 'util';\r\n\r\n// Struct. to keep directive track of permissions states\r\nexport type PermissionState = { [permission: string]: { hasPermission: boolean, hasRole: boolean } }\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter<PermissionState>();\r\n    @Output() permissionsUnauthorized = new EventEmitter<PermissionState>();\r\n\r\n    private initPermissionSubscription: Subscription;\r\n    // skip first run cause merge will fire twice\r\n    private firstMergeUnusedRun = 1;\r\n    private currentAuthorizedState: boolean;\r\n    private permissionsState: PermissionState;\r\n\r\n    constructor(\r\n        private permissionsService: NgxPermissionsService,\r\n        private configurationService: NgxPermissionsConfigurationService,\r\n        private rolesService: NgxRolesService,\r\n        private viewContainer: ViewContainerRef,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private templateRef: TemplateRef<any>\r\n    ) {\r\n        this.permissionsState = {};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\r\n    }\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const onlyChanges = changes['ngxPermissionsOnly'];\r\n        const exceptChanges = changes['ngxPermissionsExcept'];\r\n        if (onlyChanges || exceptChanges) {\r\n            // Due to bug when you pass empty array\r\n            if (onlyChanges && onlyChanges.firstChange) return;\r\n            if (exceptChanges && exceptChanges.firstChange) return;\r\n\r\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\r\n                .subscribe(() => {\r\n                    if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                        this.validateExceptAndOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                        this.validateOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n                });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initPermissionSubscription) {\r\n            this.initPermissionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    private validateExceptOnlyPermissions(): Subscription {\r\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n            .pipe(skip(this.firstMergeUnusedRun))\r\n            .subscribe(() => {\r\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                    this.validateExceptAndOnlyPermissions();\r\n                    return;\r\n                }\r\n\r\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                    this.validateOnlyPermissions();\r\n                    return;\r\n                }\r\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n            });\r\n    }\r\n\r\n    private validateExceptAndOnlyPermissions(): void {\r\n        this.getPermissions(this.ngxPermissionsExcept)\r\n            .then((hasPermission: boolean) => {\r\n                if (hasPermission) {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\r\n                    return;\r\n                }\r\n                if (!!this.ngxPermissionsOnly) throw false;\r\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n            })\r\n            .catch(() => {\r\n                if (!!this.ngxPermissionsOnly) {\r\n                    this.validateOnlyPermissions();\r\n                } else {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n                }\r\n            });\r\n    }\r\n\r\n    private validateOnlyPermissions(): void {\r\n        // Validate permissions & store permission state\r\n        this.getPermissions(this.ngxPermissionsOnly)\r\n            .then((hasPermission: boolean) => {\r\n                if (hasPermission) {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\r\n                } else {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n            });\r\n    }\r\n\r\n    private handleUnauthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = false;\r\n        this.permissionsUnauthorized.emit(this.permissionsState);\r\n\r\n        if (this.getUnAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n\r\n    }\r\n\r\n    private handleAuthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = true;\r\n        this.permissionsAuthorized.emit(this.permissionsState);\r\n\r\n        if (this.getAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n    }\r\n\r\n    private applyStrategyAccordingToStrategyType(strategy: string | Function): void {\r\n        if (isString(strategy)) {\r\n            this.applyStrategy(strategy);\r\n            return;\r\n        }\r\n\r\n        if (isFunction(strategy)) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            (strategy as Function)(this.templateRef, this.permissionsState);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private showTemplateBlockInView(template: TemplateRef<any>): void {\r\n        this.viewContainer.clear();\r\n        if (!template) {\r\n            return;\r\n        }\r\n\r\n        this.viewContainer.createEmbeddedView(template);\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    private getAuthorisedTemplates(): TemplateRef<any> {\r\n        return this.ngxPermissionsOnlyThen\r\n            || this.ngxPermissionsExceptThen\r\n            || this.ngxPermissionsThen\r\n            || this.templateRef;\r\n    }\r\n\r\n    private elseBlockDefined(): boolean {\r\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\r\n    }\r\n\r\n    private thenBlockDefined() {\r\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\r\n    }\r\n\r\n    private getAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\r\n            this.ngxPermissionsExceptAuthorisedStrategy ||\r\n            this.ngxPermissionsAuthorisedStrategy;\r\n    }\r\n\r\n    private getUnAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\r\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\r\n            this.ngxPermissionsUnauthorisedStrategy;\r\n    }\r\n\r\n    private applyStrategy(str: any) {\r\n        if (str === NgxPermissionsPredefinedStrategies.SHOW) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            return;\r\n        }\r\n\r\n        if (str === NgxPermissionsPredefinedStrategies.REMOVE) {\r\n            this.viewContainer.clear();\r\n            return;\r\n        }\r\n        const strategy = this.configurationService.getStrategy(str);\r\n        this.showTemplateBlockInView(this.templateRef);\r\n\r\n        strategy(this.templateRef, this.permissionsState);\r\n    }\r\n\r\n    /**\r\n     * Check permission service against parameter \"neddedPermissions\"\r\n     * then update this class property \"permissionsState\"\r\n     * \r\n     * @param neddedPermissions Sets the permissions/roles to check (i.e ngxPermissionsOnly)\r\n     */\r\n    private getPermissions(neddedPermissions: string | string[]): Promise<boolean> {\r\n\r\n        // Ensure we work with array\r\n        var requestedPermissions: Array<string> = transformStringToArray(neddedPermissions)\r\n\r\n        // Array of promises that request permission and roles service with \"permission\"\r\n        var promises: Promise<boolean>[] = []\r\n\r\n        // Reset \"permissions state\" directive class property\r\n        this.permissionsState = {}\r\n\r\n        if (isArray(requestedPermissions)) {\r\n            requestedPermissions.forEach((value) => {\r\n                this.permissionsState[value] = { hasPermission: false, hasRole: false }\r\n\r\n                // Check if has \"Permission\"\r\n                promises.push(\r\n                    this.permissionsService.hasPermission(value)\r\n                        .then((hasPermission) => {\r\n                            this.permissionsState[value].hasPermission = hasPermission\r\n                            return hasPermission;\r\n                        })\r\n                        .catch(() => false)\r\n                )\r\n                // Check if has \"Role\"\r\n                promises.push(\r\n                    this.rolesService.hasOnlyRoles(value)\r\n                        .then((hasPermission) => {\r\n                            this.permissionsState[value].hasRole = hasPermission\r\n                            return hasPermission;\r\n                        })\r\n                        .catch(() => false)\r\n                )\r\n            })\r\n        }\r\n\r\n        /** \r\n         * Return result :\r\n         * true : At least one of neededPermission exists in permission or role service (@see this.permissionsState to get a full detail on wich permission is true/false)\r\n         * false : none of neededPermission exists in  permission or role service\r\n        */\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((hasPermission: boolean) => {\r\n                return hasPermission === true;\r\n            }, false),\r\n            map((hasPermission) => {\r\n                return hasPermission;\r\n            })\r\n        ).toPromise().then((hasPermission: boolean) => {\r\n            return hasPermission\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    CanActivate,\r\n    CanActivateChild,\r\n    CanLoad,\r\n    NavigationExtras,\r\n    Route,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { forkJoin, from, Observable, of } from 'rxjs';\r\nimport { first, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsRouterData } from '../model/permissions-router-data.model';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';\r\n\r\ninterface NgxRedirectToNavigationParameters {\r\n    navigationCommands: any[] | Function;\r\n    navigationExtras?: NavigationExtras | Function;\r\n}\r\n\r\n@Injectable()\r\nexport class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\r\n\r\n    constructor(private permissionsService: NgxPermissionsService, private  rolesService: NgxRolesService, private router: Router) {\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\r\n        return this.hasPermissions(route, state);\r\n    }\r\n\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n        return this.hasPermissions(childRoute, state);\r\n    }\r\n\r\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\r\n        return this.hasPermissions(route);\r\n    }\r\n\r\n    private hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        const purePermissions = !!route && route.data ? route.data['permissions'] as NgxPermissionsRouterData : {};\r\n        let permissions: NgxPermissionsRouterData = this.transformPermission(purePermissions, route, state);\r\n\r\n        if (this.isParameterAvailable(permissions.except)) {\r\n            return this.passingExceptPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        if (this.isParameterAvailable(permissions.only)) {\r\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private transformPermission(purePermissions: NgxPermissionsRouterData, route: any, state: any): any {\r\n        let permissions = {\r\n            ...purePermissions\r\n        };\r\n\r\n        if (isFunction(permissions.except)) {\r\n            permissions.except = (permissions.except as Function)(route, state);\r\n        }\r\n\r\n        if (isFunction(permissions.only)) {\r\n            permissions.only = (permissions.only as Function)(route, state);\r\n        }\r\n\r\n        permissions.except = transformStringToArray(permissions.except);\r\n        permissions.only = transformStringToArray(permissions.only);\r\n\r\n        return permissions;\r\n    }\r\n\r\n    private isParameterAvailable(permission: any) {\r\n        return !!(permission) && permission.length > 0;\r\n    }\r\n\r\n    private passingExceptPermissionsValidation(permissions: NgxPermissionsRouterData, route: any, state: any) {\r\n        if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(\r\n            permissions.redirectTo)))) {\r\n            let failedPermission = '';\r\n\r\n            return from(permissions.except as any[]).pipe(\r\n                mergeMap((data) => {\r\n                    return forkJoin([\r\n                        this.permissionsService.hasPermission(<string | string[]>data),\r\n                        this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                    ]).pipe(tap((hasPermissions: boolean[]) => {\r\n                        const dontHavePermissions = hasPermissions.every((data) => data === false);\r\n\r\n                        if (!dontHavePermissions) {\r\n                            failedPermission = data;\r\n                        }\r\n                    }));\r\n                }),\r\n                first((data: any) => data.some((data: boolean) => data === true), false),\r\n                mergeMap((isAllFalse) => {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n\r\n                        return of(false);\r\n                    }\r\n\r\n                    if (!isAllFalse && permissions.only) {\r\n                        return this.onlyRedirectCheck(permissions, route, state);\r\n                    }\r\n\r\n                    return of(!isAllFalse);\r\n                })\r\n            ).toPromise();\r\n        }\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.except), this.rolesService.hasOnlyRoles(<string | string[]>permissions.except)])\r\n            .then(([hasPermission, hasRoles]) => {\r\n                if (hasPermission || hasRoles) {\r\n                    if (permissions.redirectTo) {\r\n                        this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n\r\n                if (permissions.only) {\r\n                    return this.checkOnlyPermissions(permissions, route, state);\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private redirectToAnotherRoute(redirectTo: string | any[] | NgxRedirectToNavigationParameters | Function,\r\n                                   route: ActivatedRouteSnapshot | Route,\r\n                                   state?: RouterStateSnapshot,\r\n                                   failedPermissionName?: string) {\r\n\r\n        if (isFunction(redirectTo)) {\r\n            redirectTo = (redirectTo as Function)(failedPermissionName, route, state);\r\n        }\r\n\r\n        if (this.isRedirectionWithParameters(redirectTo)) {\r\n            if (this.hasNavigationExtrasAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationExtras = ((<NgxRedirectToNavigationParameters>redirectTo).navigationExtras as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            if (this.hasNavigationCommandsAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationCommands = ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            this.router.navigate(\r\n                ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as any[]),\r\n                ((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras as NavigationExtras)\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(redirectTo)) {\r\n            this.router.navigate(redirectTo);\r\n        } else {\r\n            this.router.navigate([redirectTo]);\r\n        }\r\n    }\r\n\r\n    private isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): boolean {\r\n        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);\r\n    }\r\n\r\n    private hasNavigationExtrasAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationExtras &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras);\r\n    }\r\n\r\n    private hasNavigationCommandsAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationCommands &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationCommands);\r\n    }\r\n\r\n    private onlyRedirectCheck(permissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean> {\r\n        let failedPermission = '';\r\n\r\n        return from(permissions.only).pipe(\r\n            mergeMap((data: any) => {\r\n                return forkJoin([\r\n                    this.permissionsService.hasPermission(<string | string[]>data),\r\n                    this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                ]).pipe(\r\n                    tap((hasPermission: boolean[]) => {\r\n                        const failed = hasPermission.every((data) => data === false);\r\n\r\n                        if (failed) {\r\n                            failedPermission = data;\r\n                        }\r\n                    })\r\n                );\r\n            }),\r\n            first(\r\n                (data: any) => {\r\n                    if (isFunction(permissions.redirectTo)) {\r\n                        return data.some((data: boolean) => data === true);\r\n                    }\r\n\r\n                    return data.every((data: boolean) => data === false);\r\n                },\r\n                false\r\n            ),\r\n            mergeMap((pass: boolean): Observable<boolean> => {\r\n                if (isFunction(permissions.redirectTo)) {\r\n                    if (pass) {\r\n                        return of(true);\r\n                    } else {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                        return of(false);\r\n                    }\r\n                } else {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                    }\r\n                    return of(!pass);\r\n                }\r\n            })\r\n        ).toPromise();\r\n    }\r\n\r\n    private handleRedirectOfFailedPermission(\r\n        permissions: any,\r\n        failedPermission: string,\r\n        route: ActivatedRouteSnapshot | Route,\r\n        state?: RouterStateSnapshot\r\n    ) {\r\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\r\n            this.redirectToAnotherRoute((<any>permissions.redirectTo)[failedPermission], route, state, failedPermission);\r\n        } else {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo), route, state, failedPermission);\r\n            } else {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo)['default'], route, state, failedPermission);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFailedPermissionPropertyOfRedirectTo(permissions: any, failedPermission: string) {\r\n        return !!permissions.redirectTo && permissions.redirectTo[<any>failedPermission];\r\n    }\r\n\r\n    private checkOnlyPermissions(purePermissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        let permissions: NgxPermissionsRouterData = {\r\n            ...purePermissions\r\n        };\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.only), this.rolesService.hasOnlyRoles(<string | string[]>permissions.only)])\r\n            .then(([hasPermission, hasRole]) => {\r\n                if (hasPermission || hasRole) return true;\r\n\r\n                if (permissions.redirectTo) {\r\n                    this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                }\r\n\r\n                return false;\r\n            });\r\n    }\r\n\r\n    private passingOnlyPermissionsValidation(permissions: NgxPermissionsRouterData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        if ((isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {\r\n            return this.onlyRedirectCheck(permissions, route, state)\r\n        }\r\n        return this.checkOnlyPermissions(permissions, route, state);\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsAllowStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef,\r\n                private templateRef: TemplateRef<any>) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyThen ||\r\n            this.ngxPermissionsExceptThen ||\r\n            this.ngxPermissionsThen ||\r\n            this.templateRef;\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsRestrictStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        if (this.getUnAuthorizedTemplate()) {\r\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\r\n        }\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getUnAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyElse ||\r\n            this.ngxPermissionsExceptElse ||\r\n            this.ngxPermissionsElse;\r\n    }\r\n\r\n}\r\n","export class NgxRole {\r\n    name: string;\r\n    validationFunction: Function | string[];\r\n\r\n    constructor(name: string, validationFunction: Function | string[]) {\r\n        this.name = name;\r\n        this.validationFunction = validationFunction;\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgxPermissionsDirective } from './directive/permissions.directive';\r\nimport { NgxPermissionsService, USE_PERMISSIONS_STORE } from './service/permissions.service';\r\nimport { NgxPermissionsGuard } from './router/permissions-guard.service';\r\nimport { NgxRolesService, USE_ROLES_STORE } from './service/roles.service';\r\nimport { NgxPermissionsStore } from './store/permissions.store';\r\nimport { NgxRolesStore } from './store/roles.store';\r\nimport { NgxPermissionsAllowStubDirective } from './testing/permissions-allow.directive.stub';\r\nimport { NgxPermissionsRestrictStubDirective } from './testing/permissions-restrict.directive.stub';\r\nimport { NgxPermissionsConfigurationService, USE_CONFIGURATION_STORE } from './service/configuration.service';\r\nimport { NgxPermissionsConfigurationStore } from './store/configuration.store';\r\n\r\nexport * from './store/roles.store'\r\nexport * from './store/permissions.store'\r\nexport * from './store/configuration.store'\r\n\r\nexport * from './directive/permissions.directive';\r\n\r\nexport * from './service/permissions.service';\r\nexport * from './service/roles.service';\r\nexport * from './service/configuration.service';\r\n\r\nexport * from './router/permissions-guard.service';\r\n\r\nexport * from './model/permissions-router-data.model'\r\nexport * from './model/role.model'\r\n\r\nexport * from './testing/permissions-allow.directive.stub'\r\nexport * from './testing/permissions-restrict.directive.stub'\r\n\r\nexport * from './enums/predefined-strategies.enum'\r\n\r\nexport interface NgxPermissionsModuleConfig {\r\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\r\n    rolesIsolate?: boolean;\r\n    permissionsIsolate?: boolean;\r\n    configurationIsolate?: boolean\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsModule {\r\n    static forRoot(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                NgxPermissionsStore,\r\n                NgxRolesStore,\r\n                NgxPermissionsConfigurationStore,\r\n                NgxPermissionsService,\r\n                NgxPermissionsGuard,\r\n                NgxRolesService,\r\n                NgxPermissionsConfigurationService,\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forChild(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n                NgxPermissionsConfigurationService,\r\n                NgxPermissionsService,\r\n                NgxRolesService,\r\n                NgxPermissionsGuard\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsAllowStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsAllowStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsAllowStubModule {\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsRestrictStubModule {\r\n}\r\n\r\n\r\n"]}