{"version":3,"file":"configuration.service.d.ts","sources":["C:/Users/Oleksandr.Khymenko/WebstormProjects/ngx-permissions/dist/ngx-permissions/lib/service/configuration.service.d.ts"],"sourcesContent":["import { InjectionToken, TemplateRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\r\nimport { PermissionState } from '../directive/permissions.directive';\r\nexport declare type StrategyFunction = (templateRef: TemplateRef<any>, permissions?: PermissionState) => void;\r\nexport declare type Strategy = {\r\n    [key: string]: StrategyFunction;\r\n};\r\nexport declare const USE_CONFIGURATION_STORE: InjectionToken<{}>;\r\nexport declare class NgxPermissionsConfigurationService {\r\n    private isolate;\r\n    private configurationStore;\r\n    private strategiesSource;\r\n    strategies$: Observable<Strategy>;\r\n    onAuthorisedDefaultStrategy: string | undefined;\r\n    onUnAuthorisedDefaultStrategy: string | undefined;\r\n    constructor(isolate: boolean, configurationStore: NgxPermissionsConfigurationStore);\r\n    setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void;\r\n    setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void;\r\n    addPermissionStrategy(key: string, func: StrategyFunction): void;\r\n    getStrategy(key: string): StrategyFunction;\r\n    getAllStrategies(): Strategy;\r\n    private getDefinedStrategy;\r\n    private isPredefinedStrategy;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAoBA;"}