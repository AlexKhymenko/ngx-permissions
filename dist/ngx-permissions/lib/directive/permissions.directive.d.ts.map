{"version":3,"file":"permissions.directive.d.ts","sources":["C:/Users/Oleksandr.Khymenko/WebstormProjects/ngx-permissions/dist/ngx-permissions/lib/directive/permissions.directive.d.ts"],"sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nexport declare type PermissionState = {\r\n    [permission: string]: {\r\n        hasPermission: boolean;\r\n        hasRole: boolean;\r\n    };\r\n};\r\nexport declare class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {\r\n    private permissionsService;\r\n    private configurationService;\r\n    private rolesService;\r\n    private viewContainer;\r\n    private changeDetector;\r\n    private templateRef;\r\n    ngxPermissionsOnly: string | string[];\r\n    ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    ngxPermissionsOnlyElse: TemplateRef<any>;\r\n    ngxPermissionsExcept: string | string[];\r\n    ngxPermissionsExceptElse: TemplateRef<any>;\r\n    ngxPermissionsExceptThen: TemplateRef<any>;\r\n    ngxPermissionsThen: TemplateRef<any>;\r\n    ngxPermissionsElse: TemplateRef<any>;\r\n    ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n    ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n    ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n    permissionsAuthorized: EventEmitter<PermissionState>;\r\n    permissionsUnauthorized: EventEmitter<PermissionState>;\r\n    private initPermissionSubscription;\r\n    private firstMergeUnusedRun;\r\n    private currentAuthorizedState;\r\n    private permissionsState;\r\n    constructor(permissionsService: NgxPermissionsService, configurationService: NgxPermissionsConfigurationService, rolesService: NgxRolesService, viewContainer: ViewContainerRef, changeDetector: ChangeDetectorRef, templateRef: TemplateRef<any>);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private validateExceptOnlyPermissions;\r\n    private validateExceptAndOnlyPermissions;\r\n    private validateOnlyPermissions;\r\n    private handleUnauthorisedPermission;\r\n    private handleAuthorisedPermission;\r\n    private applyStrategyAccordingToStrategyType;\r\n    private showTemplateBlockInView;\r\n    private getAuthorisedTemplates;\r\n    private elseBlockDefined;\r\n    private thenBlockDefined;\r\n    private getAuthorizedStrategyInput;\r\n    private getUnAuthorizedStrategyInput;\r\n    private applyStrategy;\r\n    /**\r\n     * Check permission service against parameter \"neddedPermissions\"\r\n     * then update this class property \"permissionsState\"\r\n     *\r\n     * @param neddedPermissions Sets the permissions/roles to check (i.e ngxPermissionsOnly)\r\n     */\r\n    private getPermissions;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;"}