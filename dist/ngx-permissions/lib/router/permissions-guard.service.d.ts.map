{"version":3,"file":"permissions-guard.service.d.ts","sources":["C:/Users/Oleksandr.Khymenko/WebstormProjects/ngx-permissions/dist/ngx-permissions/lib/router/permissions-guard.service.d.ts"],"sourcesContent":["import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nexport declare class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\r\n    private permissionsService;\r\n    private rolesService;\r\n    private router;\r\n    constructor(permissionsService: NgxPermissionsService, rolesService: NgxRolesService, router: Router);\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean;\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;\r\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean>;\r\n    private hasPermissions;\r\n    private transformPermission;\r\n    private isParameterAvailable;\r\n    private passingExceptPermissionsValidation;\r\n    private redirectToAnotherRoute;\r\n    private isRedirectionWithParameters;\r\n    private hasNavigationExtrasAsFunction;\r\n    private hasNavigationCommandsAsFunction;\r\n    private onlyRedirectCheck;\r\n    private handleRedirectOfFailedPermission;\r\n    private isFailedPermissionPropertyOfRedirectTo;\r\n    private checkOnlyPermissions;\r\n    private passingOnlyPermissionsValidation;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAqBA;"}