{"version":3,"file":"ngx-permissions.js","sources":["ng://ngx-permissions/lib/enums/predefined-strategies.enum.ts","ng://ngx-permissions/lib/store/configuration.store.ts","ng://ngx-permissions/lib/service/configuration.service.ts","ng://ngx-permissions/lib/store/permissions.store.ts","ng://ngx-permissions/lib/utils/utils.ts","ng://ngx-permissions/lib/service/permissions.service.ts","ng://ngx-permissions/lib/store/roles.store.ts","ng://ngx-permissions/lib/service/roles.service.ts","ng://ngx-permissions/lib/directive/permissions.directive.ts","ng://ngx-permissions/lib/router/permissions-guard.service.ts","ng://ngx-permissions/lib/testing/permissions-allow.directive.stub.ts","ng://ngx-permissions/lib/testing/permissions-restrict.directive.stub.ts","ng://ngx-permissions/lib/model/role.model.ts","ng://ngx-permissions/lib/index.ts"],"sourcesContent":["export const NgxPermissionsPredefinedStrategies = {\r\n    REMOVE: 'remove',\r\n    SHOW: 'show'\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Strategy } from '../service/configuration.service';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationStore {\r\n\r\n    public strategiesSource: BehaviorSubject<Strategy> = new BehaviorSubject<Strategy>({});\r\n    public strategies$: Observable<Strategy> = this.strategiesSource.asObservable();\r\n\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\r\nimport { PermissionState } from '../directive/permissions.directive';\r\n\r\nexport type StrategyFunction = (templateRef: TemplateRef<any>, permissions?: PermissionState) => void;\r\n\r\nexport type Strategy = {\r\n    [key: string]: StrategyFunction\r\n};\r\n\r\nexport const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationService {\r\n\r\n    private strategiesSource: BehaviorSubject<Strategy>;\r\n    public strategies$: Observable<Strategy>;\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor(\r\n        @Inject(USE_CONFIGURATION_STORE) private isolate: boolean = false,\r\n        private configurationStore: NgxPermissionsConfigurationStore\r\n    ) {\r\n        this.strategiesSource = this.isolate ? new BehaviorSubject<Strategy>({}) : this.configurationStore.strategiesSource;\r\n        this.strategies$ = this.strategiesSource.asObservable();\r\n\r\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\r\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n\r\n    }\r\n\r\n    public setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public addPermissionStrategy(key: string, func: StrategyFunction): void {\r\n        this.strategiesSource.value[key] = func;\r\n    }\r\n\r\n    public getStrategy(key: string) {\r\n        return this.strategiesSource.value[key];\r\n    }\r\n\r\n    public getAllStrategies() {\r\n        return this.strategiesSource.value;\r\n    }\r\n\r\n    private getDefinedStrategy(name: string | 'remove' | 'show') {\r\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\r\n            return name;\r\n        } else {\r\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\r\n        }\r\n    }\r\n\r\n    private isPredefinedStrategy(strategy: string): boolean {\r\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsStore {\r\n\r\n    public permissionsSource = new BehaviorSubject<{}>({});\r\n    public permissions$: Observable<{}> = this.permissionsSource.asObservable();\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","export function isFunction(functionToCheck: any): functionToCheck is Function {\r\n    let getType = {};\r\n    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';\r\n}\r\n\r\nexport function isPlainObject(value: any): boolean {\r\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\r\n        return false;\r\n    } else {\r\n        let prototype = Object.getPrototypeOf(value);\r\n        return prototype === null || prototype === Object.prototype;\r\n    }\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n    return !!value && typeof value === 'string';\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean {\r\n    return typeof value === 'boolean';\r\n}\r\n\r\nexport function isPromise(promise: any) {\r\n    return Object.prototype.toString.call(promise) === '[object Promise]';\r\n}\r\n\r\nexport function notEmptyValue(value: any): boolean {\r\n    if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n    return !!value;\r\n}\r\n\r\nexport function transformStringToArray(value: any): string[] {\r\n    if (isString(value)) {\r\n        return [value];\r\n    }\r\n    return value;\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, first, map, mergeAll, switchMap, mergeMap } from 'rxjs/operators';\r\n\r\nimport { NgxPermission } from '../model/permission.model';\r\nimport { NgxPermissionsStore } from '../store/permissions.store';\r\n\r\nimport { isBoolean, isFunction, transformStringToArray } from '../utils/utils';\r\n\r\nexport type NgxPermissionsObject = { [name: string]: NgxPermission };\r\n\r\nexport const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsService {\r\n\r\n    private permissionsSource: BehaviorSubject<NgxPermissionsObject>;\r\n    public permissions$: Observable<NgxPermissionsObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_PERMISSIONS_STORE) private isolate: boolean = false,\r\n        private permissionsStore: NgxPermissionsStore\r\n    ) {\r\n        this.permissionsSource = isolate ? new BehaviorSubject<NgxPermissionsObject>({}) : permissionsStore.permissionsSource;\r\n        this.permissions$ = this.permissionsSource.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Remove all permissions from permissions source\r\n     */\r\n    public flushPermissions(): void {\r\n        this.permissionsSource.next({});\r\n    }\r\n\r\n    public hasPermission(permission: string | string[]): Promise<boolean> {\r\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\r\n            return Promise.resolve(true);\r\n        }\r\n\r\n        permission = transformStringToArray(permission);\r\n        return this.hasArrayPermission(permission);\r\n    }\r\n\r\n    public loadPermissions(permissions: string[], validationFunction?: Function): void {\r\n        const newPermissions = permissions.reduce((source, p) =>\r\n            this.reducePermission(source, p, validationFunction)\r\n            , {});\r\n\r\n        this.permissionsSource.next(newPermissions);\r\n    }\r\n\r\n    public addPermission(permission: string | string[], validationFunction?: Function): void {\r\n        if (Array.isArray(permission)) {\r\n            const permissions = permission.reduce((source, p) =>\r\n                this.reducePermission(source, p, validationFunction)\r\n                , this.permissionsSource.value);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        } else {\r\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        }\r\n    }\r\n\r\n    public removePermission(permissionName: string): void {\r\n        const permissions = {\r\n            ...this.permissionsSource.value\r\n        };\r\n        delete permissions[permissionName];\r\n        this.permissionsSource.next(permissions);\r\n    }\r\n\r\n    public getPermission(name: string): NgxPermission {\r\n        return this.permissionsSource.value[name];\r\n    }\r\n\r\n    public getPermissions(): NgxPermissionsObject {\r\n        return this.permissionsSource.value;\r\n    }\r\n\r\n    private reducePermission(\r\n        source: NgxPermissionsObject,\r\n        name: string,\r\n        validationFunction?: Function\r\n    ): NgxPermissionsObject {\r\n        if (!!validationFunction && isFunction(validationFunction)) {\r\n            return {\r\n                ...source,\r\n                [name]: { name, validationFunction }\r\n            };\r\n        } else {\r\n            return {\r\n                ...source,\r\n                [name]: { name }\r\n            };\r\n        }\r\n    }\r\n\r\n    private hasArrayPermission(permissions: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = permissions.map((key) => {\r\n            if (this.hasPermissionValidationFunction(key)) {\r\n                const immutableValue = { ...this.permissionsSource.value };\r\n                const validationFunction: Function = <Function>this.permissionsSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => {\r\n                        return validationFunction(key, immutableValue)\r\n                    }),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => {\r\n                        var b = isBoolean(promise);\r\n                        if (b) {\r\n                            return of(promise as boolean);\r\n                        }\r\n                        else {\r\n                            return promise as Promise<boolean>\r\n                        }\r\n                    }),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            // check for name of the permission if there is no validation function\r\n            return of(!!this.permissionsSource.value[key]);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data) => {\r\n                const r = data !== false;\r\n                return r;\r\n            }, false),\r\n            map((data) => {\r\n                const r = data === false ? false : true;\r\n                return r;\r\n            })\r\n        ).toPromise().then((data: any) => {\r\n            return data;\r\n        });\r\n    }\r\n\r\n    private hasPermissionValidationFunction(key: string): boolean {\r\n        return !!this.permissionsSource.value[key] &&\r\n            !!this.permissionsSource.value[key].validationFunction &&\r\n            isFunction(this.permissionsSource.value[key].validationFunction);\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport class NgxRolesStore {\r\n\r\n    public rolesSource = new BehaviorSubject<{}>({});\r\n\r\n    public roles$: Observable<{}> = this.rolesSource.asObservable();\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgxRole } from '../model/role.model';\r\nimport { NgxRolesStore } from '../store/roles.store';\r\nimport { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';\r\nimport { NgxPermissionsService } from './permissions.service';\r\n\r\nexport const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\r\n\r\nexport type NgxRolesObject = { [name: string]: NgxRole };\r\n\r\n@Injectable()\r\nexport class NgxRolesService {\r\n\r\n    private rolesSource: BehaviorSubject<NgxRolesObject>;\r\n\r\n    public roles$: Observable<NgxRolesObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_ROLES_STORE) private isolate: boolean = false,\r\n        private rolesStore: NgxRolesStore,\r\n        private permissionsService: NgxPermissionsService\r\n    ) {\r\n        this.rolesSource = this.isolate ? new BehaviorSubject<NgxRolesObject>({}) : this.rolesStore.rolesSource;\r\n        this.roles$ = this.rolesSource.asObservable();\r\n    }\r\n\r\n    public addRole(name: string, validationFunction: Function | string[]) {\r\n        const roles = {\r\n            ...this.rolesSource.value,\r\n            [name]: {name, validationFunction}\r\n        };\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public addRoles(rolesObj: { [name: string]: Function | string[] }) {\r\n        Object.keys(rolesObj).forEach((key, index) => {\r\n            this.addRole(key, rolesObj[key]);\r\n        });\r\n    }\r\n\r\n    public flushRoles() {\r\n        this.rolesSource.next({});\r\n    }\r\n\r\n    public removeRole(roleName: string) {\r\n        let roles = {\r\n            ...this.rolesSource.value\r\n        };\r\n        delete roles[roleName];\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public getRoles() {\r\n        return this.rolesSource.value;\r\n    }\r\n\r\n    public getRole(name: string) {\r\n        return this.rolesSource.value[name];\r\n    }\r\n\r\n    public hasOnlyRoles(names: string | string[]): Promise<boolean> {\r\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\r\n\r\n        if (isNamesEmpty) return Promise.resolve(true);\r\n\r\n        names = transformStringToArray(names);\r\n\r\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\r\n            .then(([hasRoles, hasPermissions]: [boolean, boolean]) => {\r\n                return hasRoles || hasPermissions;\r\n            });\r\n    }\r\n\r\n    private hasRoleKey(roleName: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = roleName.map((key) => {\r\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\r\n                                          !!this.rolesSource.value[key].validationFunction &&\r\n                                          isFunction(this.rolesSource.value[key].validationFunction);\r\n\r\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\r\n                const validationFunction: Function = <Function>this.rolesSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => validationFunction()),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\r\n                        of(promise as boolean) : promise as Promise<boolean>),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            return of(false);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data: any) => data !== false, false),\r\n            map((data) => data !== false)\r\n        ).toPromise().then((data: any) => data);\r\n    }\r\n\r\n    private hasRolePermission(roles: NgxRolesObject, roleNames: string[]): Promise<boolean> {\r\n        return from(roleNames).pipe(\r\n            mergeMap((key) => {\r\n                if (roles[key] && Array.isArray(roles[key].validationFunction)) {\r\n                    return from(<string[]>roles[key].validationFunction).pipe(\r\n                        mergeMap((permission) => this.permissionsService.hasPermission(permission)),\r\n                        every((hasPermissions) => hasPermissions === true)\r\n                    );\r\n                }\r\n\r\n                return of(false);\r\n            }),\r\n            first((hasPermission) => hasPermission === true, false)\r\n        ).toPromise();\r\n    }\r\n\r\n}\r\n","import {\r\n    ChangeDetectorRef,\r\n    Directive,\r\n    EventEmitter,\r\n    Input, OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output, SimpleChanges,\r\n    TemplateRef,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { merge, Subscription, from } from 'rxjs';\r\nimport { skip, take, mergeAll, first, map } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isBoolean, isFunction, isString, notEmptyValue, transformStringToArray } from '../utils/utils';\r\nimport { isArray } from 'util';\r\n\r\n// Struct. to keep directive track of permissions states\r\nexport type PermissionState = { [permission: string]: { hasPermission: boolean, hasRole: boolean } }\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter<PermissionState>();\r\n    @Output() permissionsUnauthorized = new EventEmitter<PermissionState>();\r\n\r\n    private initPermissionSubscription: Subscription;\r\n    // skip first run cause merge will fire twice\r\n    private firstMergeUnusedRun = 1;\r\n    private currentAuthorizedState: boolean;\r\n    private permissionsState: PermissionState;\r\n\r\n    constructor(\r\n        private permissionsService: NgxPermissionsService,\r\n        private configurationService: NgxPermissionsConfigurationService,\r\n        private rolesService: NgxRolesService,\r\n        private viewContainer: ViewContainerRef,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private templateRef: TemplateRef<any>\r\n    ) {\r\n        this.permissionsState = {};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\r\n    }\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const onlyChanges = changes['ngxPermissionsOnly'];\r\n        const exceptChanges = changes['ngxPermissionsExcept'];\r\n        if (onlyChanges || exceptChanges) {\r\n            // Due to bug when you pass empty array\r\n            if (onlyChanges && onlyChanges.firstChange) return;\r\n            if (exceptChanges && exceptChanges.firstChange) return;\r\n\r\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\r\n                .subscribe(() => {\r\n                    if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                        this.validateExceptAndOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                        this.validateOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n                });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initPermissionSubscription) {\r\n            this.initPermissionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    private validateExceptOnlyPermissions(): Subscription {\r\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n            .pipe(skip(this.firstMergeUnusedRun))\r\n            .subscribe(() => {\r\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                    this.validateExceptAndOnlyPermissions();\r\n                    return;\r\n                }\r\n\r\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                    this.validateOnlyPermissions();\r\n                    return;\r\n                }\r\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n            });\r\n    }\r\n\r\n    private validateExceptAndOnlyPermissions(): void {\r\n        this.getPermissions(this.ngxPermissionsExcept)\r\n            .then((hasPermission: boolean) => {\r\n                if (hasPermission) {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\r\n                    return;\r\n                }\r\n                if (!!this.ngxPermissionsOnly) throw false;\r\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n            })\r\n            .catch(() => {\r\n                if (!!this.ngxPermissionsOnly) {\r\n                    this.validateOnlyPermissions();\r\n                } else {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n                }\r\n            });\r\n    }\r\n\r\n    private validateOnlyPermissions(): void {\r\n        // Validate permissions & store permission state\r\n        this.getPermissions(this.ngxPermissionsOnly)\r\n            .then((hasPermission: boolean) => {\r\n                if (hasPermission) {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\r\n                } else {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n            });\r\n    }\r\n\r\n    private handleUnauthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = false;\r\n        this.permissionsUnauthorized.emit(this.permissionsState);\r\n\r\n        if (this.getUnAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n\r\n    }\r\n\r\n    private handleAuthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = true;\r\n        this.permissionsAuthorized.emit(this.permissionsState);\r\n\r\n        if (this.getAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n    }\r\n\r\n    private applyStrategyAccordingToStrategyType(strategy: string | Function): void {\r\n        if (isString(strategy)) {\r\n            this.applyStrategy(strategy);\r\n            return;\r\n        }\r\n\r\n        if (isFunction(strategy)) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            (strategy as Function)(this.templateRef, this.permissionsState);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private showTemplateBlockInView(template: TemplateRef<any>): void {\r\n        this.viewContainer.clear();\r\n        if (!template) {\r\n            return;\r\n        }\r\n\r\n        this.viewContainer.createEmbeddedView(template);\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    private getAuthorisedTemplates(): TemplateRef<any> {\r\n        return this.ngxPermissionsOnlyThen\r\n            || this.ngxPermissionsExceptThen\r\n            || this.ngxPermissionsThen\r\n            || this.templateRef;\r\n    }\r\n\r\n    private elseBlockDefined(): boolean {\r\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\r\n    }\r\n\r\n    private thenBlockDefined() {\r\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\r\n    }\r\n\r\n    private getAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\r\n            this.ngxPermissionsExceptAuthorisedStrategy ||\r\n            this.ngxPermissionsAuthorisedStrategy;\r\n    }\r\n\r\n    private getUnAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\r\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\r\n            this.ngxPermissionsUnauthorisedStrategy;\r\n    }\r\n\r\n    private applyStrategy(str: any) {\r\n        if (str === NgxPermissionsPredefinedStrategies.SHOW) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            return;\r\n        }\r\n\r\n        if (str === NgxPermissionsPredefinedStrategies.REMOVE) {\r\n            this.viewContainer.clear();\r\n            return;\r\n        }\r\n        const strategy = this.configurationService.getStrategy(str);\r\n        this.showTemplateBlockInView(this.templateRef);\r\n\r\n        strategy(this.templateRef, this.permissionsState);\r\n    }\r\n\r\n    /**\r\n     * Check permission service against parameter \"neddedPermissions\"\r\n     * then update this class property \"permissionsState\"\r\n     * \r\n     * @param neddedPermissions Sets the permissions/roles to check (i.e ngxPermissionsOnly)\r\n     */\r\n    private getPermissions(neddedPermissions: string | string[]): Promise<boolean> {\r\n\r\n        // Ensure we work with array\r\n        var requestedPermissions: Array<string> = transformStringToArray(neddedPermissions)\r\n\r\n        // Array of promises that request permission and roles service with \"permission\"\r\n        var promises: Promise<boolean>[] = []\r\n\r\n        // Reset \"permissions state\" directive class property\r\n        this.permissionsState = {}\r\n\r\n        if (isArray(requestedPermissions)) {\r\n            requestedPermissions.forEach((value) => {\r\n                this.permissionsState[value] = { hasPermission: false, hasRole: false }\r\n\r\n                // Check if has \"Permission\"\r\n                promises.push(\r\n                    this.permissionsService.hasPermission(value)\r\n                        .then((hasPermission) => {\r\n                            this.permissionsState[value].hasPermission = hasPermission\r\n                            return hasPermission;\r\n                        })\r\n                        .catch(() => false)\r\n                )\r\n                // Check if has \"Role\"\r\n                promises.push(\r\n                    this.rolesService.hasOnlyRoles(value)\r\n                        .then((hasPermission) => {\r\n                            this.permissionsState[value].hasRole = hasPermission\r\n                            return hasPermission;\r\n                        })\r\n                        .catch(() => false)\r\n                )\r\n            })\r\n        }\r\n\r\n        /** \r\n         * Return result :\r\n         * true : At least one of neededPermission exists in permission or role service (@see this.permissionsState to get a full detail on wich permission is true/false)\r\n         * false : none of neededPermission exists in  permission or role service\r\n        */\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((hasPermission: boolean) => {\r\n                return hasPermission === true;\r\n            }, false),\r\n            map((hasPermission) => {\r\n                return hasPermission;\r\n            })\r\n        ).toPromise().then((hasPermission: boolean) => {\r\n            return hasPermission\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    CanActivate,\r\n    CanActivateChild,\r\n    CanLoad,\r\n    NavigationExtras,\r\n    Route,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { forkJoin, from, Observable, of } from 'rxjs';\r\nimport { first, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsRouterData } from '../model/permissions-router-data.model';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';\r\n\r\ninterface NgxRedirectToNavigationParameters {\r\n    navigationCommands: any[] | Function;\r\n    navigationExtras?: NavigationExtras | Function;\r\n}\r\n\r\n@Injectable()\r\nexport class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\r\n\r\n    constructor(private permissionsService: NgxPermissionsService, private  rolesService: NgxRolesService, private router: Router) {\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\r\n        return this.hasPermissions(route, state);\r\n    }\r\n\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n        return this.hasPermissions(childRoute, state);\r\n    }\r\n\r\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\r\n        return this.hasPermissions(route);\r\n    }\r\n\r\n    private hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        const purePermissions = !!route && route.data ? route.data['permissions'] as NgxPermissionsRouterData : {};\r\n        let permissions: NgxPermissionsRouterData = this.transformPermission(purePermissions, route, state);\r\n\r\n        if (this.isParameterAvailable(permissions.except)) {\r\n            return this.passingExceptPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        if (this.isParameterAvailable(permissions.only)) {\r\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private transformPermission(purePermissions: NgxPermissionsRouterData, route: any, state: any): any {\r\n        let permissions = {\r\n            ...purePermissions\r\n        };\r\n\r\n        if (isFunction(permissions.except)) {\r\n            permissions.except = (permissions.except as Function)(route, state);\r\n        }\r\n\r\n        if (isFunction(permissions.only)) {\r\n            permissions.only = (permissions.only as Function)(route, state);\r\n        }\r\n\r\n        permissions.except = transformStringToArray(permissions.except);\r\n        permissions.only = transformStringToArray(permissions.only);\r\n\r\n        return permissions;\r\n    }\r\n\r\n    private isParameterAvailable(permission: any) {\r\n        return !!(permission) && permission.length > 0;\r\n    }\r\n\r\n    private passingExceptPermissionsValidation(permissions: NgxPermissionsRouterData, route: any, state: any) {\r\n        if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(\r\n            permissions.redirectTo)))) {\r\n            let failedPermission = '';\r\n\r\n            return from(permissions.except as any[]).pipe(\r\n                mergeMap((data) => {\r\n                    return forkJoin([\r\n                        this.permissionsService.hasPermission(<string | string[]>data),\r\n                        this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                    ]).pipe(tap((hasPermissions: boolean[]) => {\r\n                        const dontHavePermissions = hasPermissions.every((data) => data === false);\r\n\r\n                        if (!dontHavePermissions) {\r\n                            failedPermission = data;\r\n                        }\r\n                    }));\r\n                }),\r\n                first((data: any) => data.some((data: boolean) => data === true), false),\r\n                mergeMap((isAllFalse) => {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n\r\n                        return of(false);\r\n                    }\r\n\r\n                    if (!isAllFalse && permissions.only) {\r\n                        return this.onlyRedirectCheck(permissions, route, state);\r\n                    }\r\n\r\n                    return of(!isAllFalse);\r\n                })\r\n            ).toPromise();\r\n        }\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.except), this.rolesService.hasOnlyRoles(<string | string[]>permissions.except)])\r\n            .then(([hasPermission, hasRoles]) => {\r\n                if (hasPermission || hasRoles) {\r\n                    if (permissions.redirectTo) {\r\n                        this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n\r\n                if (permissions.only) {\r\n                    return this.checkOnlyPermissions(permissions, route, state);\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private redirectToAnotherRoute(redirectTo: string | any[] | NgxRedirectToNavigationParameters | Function,\r\n                                   route: ActivatedRouteSnapshot | Route,\r\n                                   state?: RouterStateSnapshot,\r\n                                   failedPermissionName?: string) {\r\n\r\n        if (isFunction(redirectTo)) {\r\n            redirectTo = (redirectTo as Function)(failedPermissionName, route, state);\r\n        }\r\n\r\n        if (this.isRedirectionWithParameters(redirectTo)) {\r\n            if (this.hasNavigationExtrasAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationExtras = ((<NgxRedirectToNavigationParameters>redirectTo).navigationExtras as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            if (this.hasNavigationCommandsAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationCommands = ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            this.router.navigate(\r\n                ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as any[]),\r\n                ((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras as NavigationExtras)\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(redirectTo)) {\r\n            this.router.navigate(redirectTo);\r\n        } else {\r\n            this.router.navigate([redirectTo]);\r\n        }\r\n    }\r\n\r\n    private isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): boolean {\r\n        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);\r\n    }\r\n\r\n    private hasNavigationExtrasAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationExtras &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras);\r\n    }\r\n\r\n    private hasNavigationCommandsAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationCommands &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationCommands);\r\n    }\r\n\r\n    private onlyRedirectCheck(permissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean> {\r\n        let failedPermission = '';\r\n\r\n        return from(permissions.only).pipe(\r\n            mergeMap((data: any) => {\r\n                return forkJoin([\r\n                    this.permissionsService.hasPermission(<string | string[]>data),\r\n                    this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                ]).pipe(\r\n                    tap((hasPermission: boolean[]) => {\r\n                        const failed = hasPermission.every((data) => data === false);\r\n\r\n                        if (failed) {\r\n                            failedPermission = data;\r\n                        }\r\n                    })\r\n                );\r\n            }),\r\n            first(\r\n                (data: any) => {\r\n                    if (isFunction(permissions.redirectTo)) {\r\n                        return data.some((data: boolean) => data === true);\r\n                    }\r\n\r\n                    return data.every((data: boolean) => data === false);\r\n                },\r\n                false\r\n            ),\r\n            mergeMap((pass: boolean): Observable<boolean> => {\r\n                if (isFunction(permissions.redirectTo)) {\r\n                    if (pass) {\r\n                        return of(true);\r\n                    } else {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                        return of(false);\r\n                    }\r\n                } else {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                    }\r\n                    return of(!pass);\r\n                }\r\n            })\r\n        ).toPromise();\r\n    }\r\n\r\n    private handleRedirectOfFailedPermission(\r\n        permissions: any,\r\n        failedPermission: string,\r\n        route: ActivatedRouteSnapshot | Route,\r\n        state?: RouterStateSnapshot\r\n    ) {\r\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\r\n            this.redirectToAnotherRoute((<any>permissions.redirectTo)[failedPermission], route, state, failedPermission);\r\n        } else {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo), route, state, failedPermission);\r\n            } else {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo)['default'], route, state, failedPermission);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFailedPermissionPropertyOfRedirectTo(permissions: any, failedPermission: string) {\r\n        return !!permissions.redirectTo && permissions.redirectTo[<any>failedPermission];\r\n    }\r\n\r\n    private checkOnlyPermissions(purePermissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        let permissions: NgxPermissionsRouterData = {\r\n            ...purePermissions\r\n        };\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.only), this.rolesService.hasOnlyRoles(<string | string[]>permissions.only)])\r\n            .then(([hasPermission, hasRole]) => {\r\n                if (hasPermission || hasRole) return true;\r\n\r\n                if (permissions.redirectTo) {\r\n                    this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                }\r\n\r\n                return false;\r\n            });\r\n    }\r\n\r\n    private passingOnlyPermissionsValidation(permissions: NgxPermissionsRouterData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        if ((isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {\r\n            return this.onlyRedirectCheck(permissions, route, state)\r\n        }\r\n        return this.checkOnlyPermissions(permissions, route, state);\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsAllowStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef,\r\n                private templateRef: TemplateRef<any>) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyThen ||\r\n            this.ngxPermissionsExceptThen ||\r\n            this.ngxPermissionsThen ||\r\n            this.templateRef;\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsRestrictStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        if (this.getUnAuthorizedTemplate()) {\r\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\r\n        }\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getUnAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyElse ||\r\n            this.ngxPermissionsExceptElse ||\r\n            this.ngxPermissionsElse;\r\n    }\r\n\r\n}\r\n","export class NgxRole {\r\n    name: string;\r\n    validationFunction: Function | string[];\r\n\r\n    constructor(name: string, validationFunction: Function | string[]) {\r\n        this.name = name;\r\n        this.validationFunction = validationFunction;\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgxPermissionsDirective } from './directive/permissions.directive';\r\nimport { NgxPermissionsService, USE_PERMISSIONS_STORE } from './service/permissions.service';\r\nimport { NgxPermissionsGuard } from './router/permissions-guard.service';\r\nimport { NgxRolesService, USE_ROLES_STORE } from './service/roles.service';\r\nimport { NgxPermissionsStore } from './store/permissions.store';\r\nimport { NgxRolesStore } from './store/roles.store';\r\nimport { NgxPermissionsAllowStubDirective } from './testing/permissions-allow.directive.stub';\r\nimport { NgxPermissionsRestrictStubDirective } from './testing/permissions-restrict.directive.stub';\r\nimport { NgxPermissionsConfigurationService, USE_CONFIGURATION_STORE } from './service/configuration.service';\r\nimport { NgxPermissionsConfigurationStore } from './store/configuration.store';\r\n\r\nexport * from './store/roles.store'\r\nexport * from './store/permissions.store'\r\nexport * from './store/configuration.store'\r\n\r\nexport * from './directive/permissions.directive';\r\n\r\nexport * from './service/permissions.service';\r\nexport * from './service/roles.service';\r\nexport * from './service/configuration.service';\r\n\r\nexport * from './router/permissions-guard.service';\r\n\r\nexport * from './model/permissions-router-data.model'\r\nexport * from './model/role.model'\r\n\r\nexport * from './testing/permissions-allow.directive.stub'\r\nexport * from './testing/permissions-restrict.directive.stub'\r\n\r\nexport * from './enums/predefined-strategies.enum'\r\n\r\nexport interface NgxPermissionsModuleConfig {\r\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\r\n    rolesIsolate?: boolean;\r\n    permissionsIsolate?: boolean;\r\n    configurationIsolate?: boolean\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsModule {\r\n    static forRoot(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                NgxPermissionsStore,\r\n                NgxRolesStore,\r\n                NgxPermissionsConfigurationStore,\r\n                NgxPermissionsService,\r\n                NgxPermissionsGuard,\r\n                NgxRolesService,\r\n                NgxPermissionsConfigurationService,\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forChild(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n                NgxPermissionsConfigurationService,\r\n                NgxPermissionsService,\r\n                NgxRolesService,\r\n                NgxPermissionsGuard\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsAllowStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsAllowStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsAllowStubModule {\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsRestrictStubModule {\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}