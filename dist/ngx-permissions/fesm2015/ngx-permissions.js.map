{"version":3,"sources":["C:/Users/Oleksandr.Khymenko/WebstormProjects/ngx-permissions/dist/ngx-permissions/fesm2015/ngx-permissions.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;CAcC,+FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2FD,oaAGC;;;;;;;;;;;;;;;;;;;;CAgBD,iGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoQD,sXAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2LD,qUAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwXD,aAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+XD,2oBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyCD,aAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyDD,aAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwFD,gLAWC;;;;;;;;;;;;;;;;;CAED,2MAWC;;;;;;;;;;;;;;;;;CAED,oNAWC","file":"ngx-permissions.js","sourcesContent":["import { Injectable, InjectionToken, Inject, EventEmitter, Directive, ViewContainerRef, ChangeDetectorRef, TemplateRef, Input, Output, NgModule } from '@angular/core';\nimport { BehaviorSubject, of, from, merge, forkJoin } from 'rxjs';\nimport { map, switchMap, catchError, mergeAll, first, mergeMap, every, skip, take, tap } from 'rxjs/operators';\nimport { isArray } from 'util';\nimport { Router } from '@angular/router';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NgxPermissionsPredefinedStrategies = {\r\n    REMOVE: 'remove',\r\n    SHOW: 'show'\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsConfigurationStore {\r\n    constructor() {\r\n        this.strategiesSource = new BehaviorSubject({});\r\n        this.strategies$ = this.strategiesSource.asObservable();\r\n    }\r\n}\r\nNgxPermissionsConfigurationStore.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsConfigurationStore.ctorParameters = () => [];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\r\nclass NgxPermissionsConfigurationService {\r\n    /**\r\n     * @param {?=} isolate\r\n     * @param {?=} configurationStore\r\n     */\r\n    constructor(isolate = false, configurationStore) {\r\n        this.isolate = isolate;\r\n        this.configurationStore = configurationStore;\r\n        this.strategiesSource = this.isolate ? new BehaviorSubject({}) : this.configurationStore.strategiesSource;\r\n        this.strategies$ = this.strategiesSource.asObservable();\r\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\r\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    setDefaultOnAuthorizedStrategy(name) {\r\n        if (this.isolate) {\r\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        }\r\n        else {\r\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    setDefaultOnUnauthorizedStrategy(name) {\r\n        if (this.isolate) {\r\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        }\r\n        else {\r\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    addPermissionStrategy(key, func) {\r\n        this.strategiesSource.value[key] = func;\r\n    }\r\n    /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    getStrategy(key) {\r\n        return this.strategiesSource.value[key];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAllStrategies() {\r\n        return this.strategiesSource.value;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getDefinedStrategy(name) {\r\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\r\n            return name;\r\n        }\r\n        else {\r\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} strategy\r\n     * @return {?}\r\n     */\r\n    isPredefinedStrategy(strategy) {\r\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\r\n    }\r\n}\r\nNgxPermissionsConfigurationService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsConfigurationService.ctorParameters = () => [\r\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_CONFIGURATION_STORE,] }] },\r\n    { type: NgxPermissionsConfigurationStore }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsStore {\r\n    constructor() {\r\n        this.permissionsSource = new BehaviorSubject({});\r\n        this.permissions$ = this.permissionsSource.asObservable();\r\n    }\r\n}\r\nNgxPermissionsStore.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsStore.ctorParameters = () => [];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} functionToCheck\r\n * @return {?}\r\n */\r\nfunction isFunction(functionToCheck) {\r\n    /** @type {?} */\r\n    let getType = {};\r\n    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isPlainObject(value) {\r\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\r\n        return false;\r\n    }\r\n    else {\r\n        /** @type {?} */\r\n        let prototype = Object.getPrototypeOf(value);\r\n        return prototype === null || prototype === Object.prototype;\r\n    }\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isString(value) {\r\n    return !!value && typeof value === 'string';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\n/**\r\n * @param {?} promise\r\n * @return {?}\r\n */\r\nfunction isPromise(promise) {\r\n    return Object.prototype.toString.call(promise) === '[object Promise]';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction notEmptyValue(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n    return !!value;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction transformStringToArray(value) {\r\n    if (isString(value)) {\r\n        return [value];\r\n    }\r\n    return value;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\r\nclass NgxPermissionsService {\r\n    /**\r\n     * @param {?=} isolate\r\n     * @param {?=} permissionsStore\r\n     */\r\n    constructor(isolate = false, permissionsStore) {\r\n        this.isolate = isolate;\r\n        this.permissionsStore = permissionsStore;\r\n        this.permissionsSource = isolate ? new BehaviorSubject({}) : permissionsStore.permissionsSource;\r\n        this.permissions$ = this.permissionsSource.asObservable();\r\n    }\r\n    /**\r\n     * Remove all permissions from permissions source\r\n     * @return {?}\r\n     */\r\n    flushPermissions() {\r\n        this.permissionsSource.next({});\r\n    }\r\n    /**\r\n     * @param {?} permission\r\n     * @return {?}\r\n     */\r\n    hasPermission(permission) {\r\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\r\n            return Promise.resolve(true);\r\n        }\r\n        permission = transformStringToArray(permission);\r\n        return this.hasArrayPermission(permission);\r\n    }\r\n    /**\r\n     * @param {?} permissions\r\n     * @param {?=} validationFunction\r\n     * @return {?}\r\n     */\r\n    loadPermissions(permissions, validationFunction) {\r\n        /** @type {?} */\r\n        const newPermissions = permissions.reduce((/**\r\n         * @param {?} source\r\n         * @param {?} p\r\n         * @return {?}\r\n         */\r\n        (source, p) => this.reducePermission(source, p, validationFunction)), {});\r\n        this.permissionsSource.next(newPermissions);\r\n    }\r\n    /**\r\n     * @param {?} permission\r\n     * @param {?=} validationFunction\r\n     * @return {?}\r\n     */\r\n    addPermission(permission, validationFunction) {\r\n        if (Array.isArray(permission)) {\r\n            /** @type {?} */\r\n            const permissions = permission.reduce((/**\r\n             * @param {?} source\r\n             * @param {?} p\r\n             * @return {?}\r\n             */\r\n            (source, p) => this.reducePermission(source, p, validationFunction)), this.permissionsSource.value);\r\n            this.permissionsSource.next(permissions);\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\r\n            this.permissionsSource.next(permissions);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} permissionName\r\n     * @return {?}\r\n     */\r\n    removePermission(permissionName) {\r\n        /** @type {?} */\r\n        const permissions = Object.assign({}, this.permissionsSource.value);\r\n        delete permissions[permissionName];\r\n        this.permissionsSource.next(permissions);\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getPermission(name) {\r\n        return this.permissionsSource.value[name];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPermissions() {\r\n        return this.permissionsSource.value;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} source\r\n     * @param {?} name\r\n     * @param {?=} validationFunction\r\n     * @return {?}\r\n     */\r\n    reducePermission(source, name, validationFunction) {\r\n        if (!!validationFunction && isFunction(validationFunction)) {\r\n            return Object.assign({}, source, { [name]: { name, validationFunction } });\r\n        }\r\n        else {\r\n            return Object.assign({}, source, { [name]: { name } });\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permissions\r\n     * @return {?}\r\n     */\r\n    hasArrayPermission(permissions) {\r\n        /** @type {?} */\r\n        const promises = permissions.map((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        (key) => {\r\n            if (this.hasPermissionValidationFunction(key)) {\r\n                /** @type {?} */\r\n                const immutableValue = Object.assign({}, this.permissionsSource.value);\r\n                /** @type {?} */\r\n                const validationFunction = (/** @type {?} */ (this.permissionsSource.value[key].validationFunction));\r\n                return of(null).pipe(map((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    return validationFunction(key, immutableValue);\r\n                })), switchMap((/**\r\n                 * @param {?} promise\r\n                 * @return {?}\r\n                 */\r\n                (promise) => {\r\n                    /** @type {?} */\r\n                    var b = isBoolean(promise);\r\n                    if (b) {\r\n                        return of((/** @type {?} */ (promise)));\r\n                    }\r\n                    else {\r\n                        return (/** @type {?} */ (promise));\r\n                    }\r\n                })), catchError((/**\r\n                 * @return {?}\r\n                 */\r\n                () => of(false))));\r\n            }\r\n            // check for name of the permission if there is no validation function\r\n            return of(!!this.permissionsSource.value[key]);\r\n        }));\r\n        return from(promises).pipe(mergeAll(), first((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => {\r\n            /** @type {?} */\r\n            const r = data !== false;\r\n            return r;\r\n        }), false), map((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => {\r\n            /** @type {?} */\r\n            const r = data === false ? false : true;\r\n            return r;\r\n        }))).toPromise().then((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => {\r\n            return data;\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    hasPermissionValidationFunction(key) {\r\n        return !!this.permissionsSource.value[key] &&\r\n            !!this.permissionsSource.value[key].validationFunction &&\r\n            isFunction(this.permissionsSource.value[key].validationFunction);\r\n    }\r\n}\r\nNgxPermissionsService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsService.ctorParameters = () => [\r\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_PERMISSIONS_STORE,] }] },\r\n    { type: NgxPermissionsStore }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxRolesStore {\r\n    constructor() {\r\n        this.rolesSource = new BehaviorSubject({});\r\n        this.roles$ = this.rolesSource.asObservable();\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\r\nclass NgxRolesService {\r\n    /**\r\n     * @param {?=} isolate\r\n     * @param {?=} rolesStore\r\n     * @param {?=} permissionsService\r\n     */\r\n    constructor(isolate = false, rolesStore, permissionsService) {\r\n        this.isolate = isolate;\r\n        this.rolesStore = rolesStore;\r\n        this.permissionsService = permissionsService;\r\n        this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;\r\n        this.roles$ = this.rolesSource.asObservable();\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} validationFunction\r\n     * @return {?}\r\n     */\r\n    addRole(name, validationFunction) {\r\n        /** @type {?} */\r\n        const roles = Object.assign({}, this.rolesSource.value, { [name]: { name, validationFunction } });\r\n        this.rolesSource.next(roles);\r\n    }\r\n    /**\r\n     * @param {?} rolesObj\r\n     * @return {?}\r\n     */\r\n    addRoles(rolesObj) {\r\n        Object.keys(rolesObj).forEach((/**\r\n         * @param {?} key\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        (key, index) => {\r\n            this.addRole(key, rolesObj[key]);\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    flushRoles() {\r\n        this.rolesSource.next({});\r\n    }\r\n    /**\r\n     * @param {?} roleName\r\n     * @return {?}\r\n     */\r\n    removeRole(roleName) {\r\n        /** @type {?} */\r\n        let roles = Object.assign({}, this.rolesSource.value);\r\n        delete roles[roleName];\r\n        this.rolesSource.next(roles);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getRoles() {\r\n        return this.rolesSource.value;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getRole(name) {\r\n        return this.rolesSource.value[name];\r\n    }\r\n    /**\r\n     * @param {?} names\r\n     * @return {?}\r\n     */\r\n    hasOnlyRoles(names) {\r\n        /** @type {?} */\r\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\r\n        if (isNamesEmpty)\r\n            return Promise.resolve(true);\r\n        names = transformStringToArray(names);\r\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\r\n            .then((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        ([hasRoles, hasPermissions]) => {\r\n            return hasRoles || hasPermissions;\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} roleName\r\n     * @return {?}\r\n     */\r\n    hasRoleKey(roleName) {\r\n        /** @type {?} */\r\n        const promises = roleName.map((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        (key) => {\r\n            /** @type {?} */\r\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\r\n                !!this.rolesSource.value[key].validationFunction &&\r\n                isFunction(this.rolesSource.value[key].validationFunction);\r\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\r\n                /** @type {?} */\r\n                const validationFunction = (/** @type {?} */ (this.rolesSource.value[key].validationFunction));\r\n                return of(null).pipe(map((/**\r\n                 * @return {?}\r\n                 */\r\n                () => validationFunction())), switchMap((/**\r\n                 * @param {?} promise\r\n                 * @return {?}\r\n                 */\r\n                (promise) => isBoolean(promise) ?\r\n                    of((/** @type {?} */ (promise))) : (/** @type {?} */ (promise)))), catchError((/**\r\n                 * @return {?}\r\n                 */\r\n                () => of(false))));\r\n            }\r\n            return of(false);\r\n        }));\r\n        return from(promises).pipe(mergeAll(), first((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => data !== false), false), map((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => data !== false))).toPromise().then((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => data));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} roles\r\n     * @param {?} roleNames\r\n     * @return {?}\r\n     */\r\n    hasRolePermission(roles, roleNames) {\r\n        return from(roleNames).pipe(mergeMap((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        (key) => {\r\n            if (roles[key] && Array.isArray(roles[key].validationFunction)) {\r\n                return from((/** @type {?} */ (roles[key].validationFunction))).pipe(mergeMap((/**\r\n                 * @param {?} permission\r\n                 * @return {?}\r\n                 */\r\n                (permission) => this.permissionsService.hasPermission(permission))), every((/**\r\n                 * @param {?} hasPermissions\r\n                 * @return {?}\r\n                 */\r\n                (hasPermissions) => hasPermissions === true)));\r\n            }\r\n            return of(false);\r\n        })), first((/**\r\n         * @param {?} hasPermission\r\n         * @return {?}\r\n         */\r\n        (hasPermission) => hasPermission === true), false)).toPromise();\r\n    }\r\n}\r\nNgxRolesService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgxRolesService.ctorParameters = () => [\r\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_ROLES_STORE,] }] },\r\n    { type: NgxRolesStore },\r\n    { type: NgxPermissionsService }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsDirective {\r\n    /**\r\n     * @param {?} permissionsService\r\n     * @param {?} configurationService\r\n     * @param {?} rolesService\r\n     * @param {?} viewContainer\r\n     * @param {?} changeDetector\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(permissionsService, configurationService, rolesService, viewContainer, changeDetector, templateRef) {\r\n        this.permissionsService = permissionsService;\r\n        this.configurationService = configurationService;\r\n        this.rolesService = rolesService;\r\n        this.viewContainer = viewContainer;\r\n        this.changeDetector = changeDetector;\r\n        this.templateRef = templateRef;\r\n        this.permissionsAuthorized = new EventEmitter();\r\n        this.permissionsUnauthorized = new EventEmitter();\r\n        // skip first run cause merge will fire twice\r\n        this.firstMergeUnusedRun = 1;\r\n        this.permissionsState = {};\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.viewContainer.clear();\r\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        /** @type {?} */\r\n        const onlyChanges = changes['ngxPermissionsOnly'];\r\n        /** @type {?} */\r\n        const exceptChanges = changes['ngxPermissionsExcept'];\r\n        if (onlyChanges || exceptChanges) {\r\n            // Due to bug when you pass empty array\r\n            if (onlyChanges && onlyChanges.firstChange)\r\n                return;\r\n            if (exceptChanges && exceptChanges.firstChange)\r\n                return;\r\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\r\n                .subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                    this.validateExceptAndOnlyPermissions();\r\n                    return;\r\n                }\r\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                    this.validateOnlyPermissions();\r\n                    return;\r\n                }\r\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.initPermissionSubscription) {\r\n            this.initPermissionSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    validateExceptOnlyPermissions() {\r\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n            .pipe(skip(this.firstMergeUnusedRun))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                this.validateExceptAndOnlyPermissions();\r\n                return;\r\n            }\r\n            if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                this.validateOnlyPermissions();\r\n                return;\r\n            }\r\n            this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    validateExceptAndOnlyPermissions() {\r\n        this.getPermissions(this.ngxPermissionsExcept)\r\n            .then((/**\r\n         * @param {?} hasPermission\r\n         * @return {?}\r\n         */\r\n        (hasPermission) => {\r\n            if (hasPermission) {\r\n                this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\r\n                return;\r\n            }\r\n            if (!!this.ngxPermissionsOnly)\r\n                throw false;\r\n            this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n        }))\r\n            .catch((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (!!this.ngxPermissionsOnly) {\r\n                this.validateOnlyPermissions();\r\n            }\r\n            else {\r\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    validateOnlyPermissions() {\r\n        // Validate permissions & store permission state\r\n        this.getPermissions(this.ngxPermissionsOnly)\r\n            .then((/**\r\n         * @param {?} hasPermission\r\n         * @return {?}\r\n         */\r\n        (hasPermission) => {\r\n            if (hasPermission) {\r\n                this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\r\n            }\r\n            else {\r\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n            }\r\n        }))\r\n            .catch((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} template\r\n     * @return {?}\r\n     */\r\n    handleUnauthorisedPermission(template) {\r\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState)\r\n            return;\r\n        this.currentAuthorizedState = false;\r\n        this.permissionsUnauthorized.emit(this.permissionsState);\r\n        if (this.getUnAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\r\n        }\r\n        else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} template\r\n     * @return {?}\r\n     */\r\n    handleAuthorisedPermission(template) {\r\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState)\r\n            return;\r\n        this.currentAuthorizedState = true;\r\n        this.permissionsAuthorized.emit(this.permissionsState);\r\n        if (this.getAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\r\n        }\r\n        else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} strategy\r\n     * @return {?}\r\n     */\r\n    applyStrategyAccordingToStrategyType(strategy) {\r\n        if (isString(strategy)) {\r\n            this.applyStrategy(strategy);\r\n            return;\r\n        }\r\n        if (isFunction(strategy)) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            ((/** @type {?} */ (strategy)))(this.templateRef, this.permissionsState);\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} template\r\n     * @return {?}\r\n     */\r\n    showTemplateBlockInView(template) {\r\n        this.viewContainer.clear();\r\n        if (!template) {\r\n            return;\r\n        }\r\n        this.viewContainer.createEmbeddedView(template);\r\n        this.changeDetector.markForCheck();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getAuthorisedTemplates() {\r\n        return this.ngxPermissionsOnlyThen\r\n            || this.ngxPermissionsExceptThen\r\n            || this.ngxPermissionsThen\r\n            || this.templateRef;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    elseBlockDefined() {\r\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    thenBlockDefined() {\r\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\r\n            this.ngxPermissionsExceptAuthorisedStrategy ||\r\n            this.ngxPermissionsAuthorisedStrategy;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getUnAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\r\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\r\n            this.ngxPermissionsUnauthorisedStrategy;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    applyStrategy(str) {\r\n        if (str === NgxPermissionsPredefinedStrategies.SHOW) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            return;\r\n        }\r\n        if (str === NgxPermissionsPredefinedStrategies.REMOVE) {\r\n            this.viewContainer.clear();\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const strategy = this.configurationService.getStrategy(str);\r\n        this.showTemplateBlockInView(this.templateRef);\r\n        strategy(this.templateRef, this.permissionsState);\r\n    }\r\n    /**\r\n     * Check permission service against parameter \"neddedPermissions\"\r\n     * then update this class property \"permissionsState\"\r\n     *\r\n     * @private\r\n     * @param {?} neddedPermissions Sets the permissions/roles to check (i.e ngxPermissionsOnly)\r\n     * @return {?}\r\n     */\r\n    getPermissions(neddedPermissions) {\r\n        // Ensure we work with array\r\n        /** @type {?} */\r\n        var requestedPermissions = transformStringToArray(neddedPermissions)\r\n        // Array of promises that request permission and roles service with \"permission\"\r\n        ;\r\n        // Array of promises that request permission and roles service with \"permission\"\r\n        /** @type {?} */\r\n        var promises = []\r\n        // Reset \"permissions state\" directive class property\r\n        ;\r\n        // Reset \"permissions state\" directive class property\r\n        this.permissionsState = {};\r\n        if (isArray(requestedPermissions)) {\r\n            requestedPermissions.forEach((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            (value) => {\r\n                this.permissionsState[value] = { hasPermission: false, hasRole: false };\r\n                // Check if has \"Permission\"\r\n                promises.push(this.permissionsService.hasPermission(value)\r\n                    .then((/**\r\n                 * @param {?} hasPermission\r\n                 * @return {?}\r\n                 */\r\n                (hasPermission) => {\r\n                    this.permissionsState[value].hasPermission = hasPermission;\r\n                    return hasPermission;\r\n                }))\r\n                    .catch((/**\r\n                 * @return {?}\r\n                 */\r\n                () => false)));\r\n                // Check if has \"Role\"\r\n                promises.push(this.rolesService.hasOnlyRoles(value)\r\n                    .then((/**\r\n                 * @param {?} hasPermission\r\n                 * @return {?}\r\n                 */\r\n                (hasPermission) => {\r\n                    this.permissionsState[value].hasRole = hasPermission;\r\n                    return hasPermission;\r\n                }))\r\n                    .catch((/**\r\n                 * @return {?}\r\n                 */\r\n                () => false)));\r\n            }));\r\n        }\r\n        /**\r\n         * Return result :\r\n         * true : At least one of neededPermission exists in permission or role service (@see this.permissionsState to get a full detail on wich permission is true/false)\r\n         * false : none of neededPermission exists in  permission or role service\r\n        */\r\n        return from(promises).pipe(mergeAll(), first((/**\r\n         * @param {?} hasPermission\r\n         * @return {?}\r\n         */\r\n        (hasPermission) => {\r\n            return hasPermission === true;\r\n        }), false), map((/**\r\n         * @param {?} hasPermission\r\n         * @return {?}\r\n         */\r\n        (hasPermission) => {\r\n            return hasPermission;\r\n        }))).toPromise().then((/**\r\n         * @param {?} hasPermission\r\n         * @return {?}\r\n         */\r\n        (hasPermission) => {\r\n            return hasPermission;\r\n        }));\r\n    }\r\n}\r\nNgxPermissionsDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsDirective.ctorParameters = () => [\r\n    { type: NgxPermissionsService },\r\n    { type: NgxPermissionsConfigurationService },\r\n    { type: NgxRolesService },\r\n    { type: ViewContainerRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: TemplateRef }\r\n];\r\nNgxPermissionsDirective.propDecorators = {\r\n    ngxPermissionsOnly: [{ type: Input }],\r\n    ngxPermissionsOnlyThen: [{ type: Input }],\r\n    ngxPermissionsOnlyElse: [{ type: Input }],\r\n    ngxPermissionsExcept: [{ type: Input }],\r\n    ngxPermissionsExceptElse: [{ type: Input }],\r\n    ngxPermissionsExceptThen: [{ type: Input }],\r\n    ngxPermissionsThen: [{ type: Input }],\r\n    ngxPermissionsElse: [{ type: Input }],\r\n    ngxPermissionsOnlyAuthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsOnlyUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsExceptUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsExceptAuthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsAuthorisedStrategy: [{ type: Input }],\r\n    permissionsAuthorized: [{ type: Output }],\r\n    permissionsUnauthorized: [{ type: Output }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsGuard {\r\n    /**\r\n     * @param {?} permissionsService\r\n     * @param {?} rolesService\r\n     * @param {?} router\r\n     */\r\n    constructor(permissionsService, rolesService, router) {\r\n        this.permissionsService = permissionsService;\r\n        this.rolesService = rolesService;\r\n        this.router = router;\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    canActivate(route, state) {\r\n        return this.hasPermissions(route, state);\r\n    }\r\n    /**\r\n     * @param {?} childRoute\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    canActivateChild(childRoute, state) {\r\n        return this.hasPermissions(childRoute, state);\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    canLoad(route) {\r\n        return this.hasPermissions(route);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} route\r\n     * @param {?=} state\r\n     * @return {?}\r\n     */\r\n    hasPermissions(route, state) {\r\n        /** @type {?} */\r\n        const purePermissions = !!route && route.data ? (/** @type {?} */ (route.data['permissions'])) : {};\r\n        /** @type {?} */\r\n        let permissions = this.transformPermission(purePermissions, route, state);\r\n        if (this.isParameterAvailable(permissions.except)) {\r\n            return this.passingExceptPermissionsValidation(permissions, route, state);\r\n        }\r\n        if (this.isParameterAvailable(permissions.only)) {\r\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} purePermissions\r\n     * @param {?} route\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    transformPermission(purePermissions, route, state) {\r\n        /** @type {?} */\r\n        let permissions = Object.assign({}, purePermissions);\r\n        if (isFunction(permissions.except)) {\r\n            permissions.except = ((/** @type {?} */ (permissions.except)))(route, state);\r\n        }\r\n        if (isFunction(permissions.only)) {\r\n            permissions.only = ((/** @type {?} */ (permissions.only)))(route, state);\r\n        }\r\n        permissions.except = transformStringToArray(permissions.except);\r\n        permissions.only = transformStringToArray(permissions.only);\r\n        return permissions;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permission\r\n     * @return {?}\r\n     */\r\n    isParameterAvailable(permission) {\r\n        return !!(permission) && permission.length > 0;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permissions\r\n     * @param {?} route\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    passingExceptPermissionsValidation(permissions, route, state) {\r\n        if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo)))) {\r\n            /** @type {?} */\r\n            let failedPermission = '';\r\n            return from((/** @type {?} */ (permissions.except))).pipe(mergeMap((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => {\r\n                return forkJoin([\r\n                    this.permissionsService.hasPermission((/** @type {?} */ (data))),\r\n                    this.rolesService.hasOnlyRoles((/** @type {?} */ (data)))\r\n                ]).pipe(tap((/**\r\n                 * @param {?} hasPermissions\r\n                 * @return {?}\r\n                 */\r\n                (hasPermissions) => {\r\n                    /** @type {?} */\r\n                    const dontHavePermissions = hasPermissions.every((/**\r\n                     * @param {?} data\r\n                     * @return {?}\r\n                     */\r\n                    (data) => data === false));\r\n                    if (!dontHavePermissions) {\r\n                        failedPermission = data;\r\n                    }\r\n                })));\r\n            })), first((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => data.some((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => data === true))), false), mergeMap((/**\r\n             * @param {?} isAllFalse\r\n             * @return {?}\r\n             */\r\n            (isAllFalse) => {\r\n                if (!!failedPermission) {\r\n                    this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                    return of(false);\r\n                }\r\n                if (!isAllFalse && permissions.only) {\r\n                    return this.onlyRedirectCheck(permissions, route, state);\r\n                }\r\n                return of(!isAllFalse);\r\n            }))).toPromise();\r\n        }\r\n        return Promise.all([this.permissionsService.hasPermission((/** @type {?} */ (permissions.except))), this.rolesService.hasOnlyRoles((/** @type {?} */ (permissions.except)))])\r\n            .then((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        ([hasPermission, hasRoles]) => {\r\n            if (hasPermission || hasRoles) {\r\n                if (permissions.redirectTo) {\r\n                    this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                }\r\n                return false;\r\n            }\r\n            if (permissions.only) {\r\n                return this.checkOnlyPermissions(permissions, route, state);\r\n            }\r\n            return true;\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} redirectTo\r\n     * @param {?} route\r\n     * @param {?=} state\r\n     * @param {?=} failedPermissionName\r\n     * @return {?}\r\n     */\r\n    redirectToAnotherRoute(redirectTo, route, state, failedPermissionName) {\r\n        if (isFunction(redirectTo)) {\r\n            redirectTo = ((/** @type {?} */ (redirectTo)))(failedPermissionName, route, state);\r\n        }\r\n        if (this.isRedirectionWithParameters(redirectTo)) {\r\n            if (this.hasNavigationExtrasAsFunction(redirectTo)) {\r\n                ((/** @type {?} */ (redirectTo))).navigationExtras = ((/** @type {?} */ (((/** @type {?} */ (redirectTo))).navigationExtras)))(route, state);\r\n            }\r\n            if (this.hasNavigationCommandsAsFunction(redirectTo)) {\r\n                ((/** @type {?} */ (redirectTo))).navigationCommands = ((/** @type {?} */ (((/** @type {?} */ (redirectTo))).navigationCommands)))(route, state);\r\n            }\r\n            this.router.navigate(((/** @type {?} */ (((/** @type {?} */ (redirectTo))).navigationCommands))), ((/** @type {?} */ (((/** @type {?} */ (redirectTo))).navigationExtras))));\r\n            return;\r\n        }\r\n        if (Array.isArray(redirectTo)) {\r\n            this.router.navigate(redirectTo);\r\n        }\r\n        else {\r\n            this.router.navigate([redirectTo]);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} object\r\n     * @return {?}\r\n     */\r\n    isRedirectionWithParameters(object) {\r\n        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} redirectTo\r\n     * @return {?}\r\n     */\r\n    hasNavigationExtrasAsFunction(redirectTo) {\r\n        return !!((/** @type {?} */ (redirectTo))).navigationExtras &&\r\n            isFunction(((/** @type {?} */ (redirectTo))).navigationExtras);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} redirectTo\r\n     * @return {?}\r\n     */\r\n    hasNavigationCommandsAsFunction(redirectTo) {\r\n        return !!((/** @type {?} */ (redirectTo))).navigationCommands &&\r\n            isFunction(((/** @type {?} */ (redirectTo))).navigationCommands);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permissions\r\n     * @param {?} route\r\n     * @param {?=} state\r\n     * @return {?}\r\n     */\r\n    onlyRedirectCheck(permissions, route, state) {\r\n        /** @type {?} */\r\n        let failedPermission = '';\r\n        return from(permissions.only).pipe(mergeMap((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => {\r\n            return forkJoin([\r\n                this.permissionsService.hasPermission((/** @type {?} */ (data))),\r\n                this.rolesService.hasOnlyRoles((/** @type {?} */ (data)))\r\n            ]).pipe(tap((/**\r\n             * @param {?} hasPermission\r\n             * @return {?}\r\n             */\r\n            (hasPermission) => {\r\n                /** @type {?} */\r\n                const failed = hasPermission.every((/**\r\n                 * @param {?} data\r\n                 * @return {?}\r\n                 */\r\n                (data) => data === false));\r\n                if (failed) {\r\n                    failedPermission = data;\r\n                }\r\n            })));\r\n        })), first((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        (data) => {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                return data.some((/**\r\n                 * @param {?} data\r\n                 * @return {?}\r\n                 */\r\n                (data) => data === true));\r\n            }\r\n            return data.every((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => data === false));\r\n        }), false), mergeMap((/**\r\n         * @param {?} pass\r\n         * @return {?}\r\n         */\r\n        (pass) => {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                if (pass) {\r\n                    return of(true);\r\n                }\r\n                else {\r\n                    this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                    return of(false);\r\n                }\r\n            }\r\n            else {\r\n                if (!!failedPermission) {\r\n                    this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                }\r\n                return of(!pass);\r\n            }\r\n        }))).toPromise();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permissions\r\n     * @param {?} failedPermission\r\n     * @param {?} route\r\n     * @param {?=} state\r\n     * @return {?}\r\n     */\r\n    handleRedirectOfFailedPermission(permissions, failedPermission, route, state) {\r\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\r\n            this.redirectToAnotherRoute(((/** @type {?} */ (permissions.redirectTo)))[failedPermission], route, state, failedPermission);\r\n        }\r\n        else {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                this.redirectToAnotherRoute(((/** @type {?} */ (permissions.redirectTo))), route, state, failedPermission);\r\n            }\r\n            else {\r\n                this.redirectToAnotherRoute(((/** @type {?} */ (permissions.redirectTo)))['default'], route, state, failedPermission);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permissions\r\n     * @param {?} failedPermission\r\n     * @return {?}\r\n     */\r\n    isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission) {\r\n        return !!permissions.redirectTo && permissions.redirectTo[(/** @type {?} */ (failedPermission))];\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} purePermissions\r\n     * @param {?} route\r\n     * @param {?=} state\r\n     * @return {?}\r\n     */\r\n    checkOnlyPermissions(purePermissions, route, state) {\r\n        /** @type {?} */\r\n        let permissions = Object.assign({}, purePermissions);\r\n        return Promise.all([this.permissionsService.hasPermission((/** @type {?} */ (permissions.only))), this.rolesService.hasOnlyRoles((/** @type {?} */ (permissions.only)))])\r\n            .then((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        ([hasPermission, hasRole]) => {\r\n            if (hasPermission || hasRole)\r\n                return true;\r\n            if (permissions.redirectTo) {\r\n                this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n            }\r\n            return false;\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} permissions\r\n     * @param {?} route\r\n     * @param {?=} state\r\n     * @return {?}\r\n     */\r\n    passingOnlyPermissionsValidation(permissions, route, state) {\r\n        if ((isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {\r\n            return this.onlyRedirectCheck(permissions, route, state);\r\n        }\r\n        return this.checkOnlyPermissions(permissions, route, state);\r\n    }\r\n}\r\nNgxPermissionsGuard.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsGuard.ctorParameters = () => [\r\n    { type: NgxPermissionsService },\r\n    { type: NgxRolesService },\r\n    { type: Router }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsAllowStubDirective {\r\n    /**\r\n     * @param {?} viewContainer\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(viewContainer, templateRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.templateRef = templateRef;\r\n        this.permissionsAuthorized = new EventEmitter();\r\n        this.permissionsUnauthorized = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.viewContainer.clear();\r\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyThen ||\r\n            this.ngxPermissionsExceptThen ||\r\n            this.ngxPermissionsThen ||\r\n            this.templateRef;\r\n    }\r\n}\r\nNgxPermissionsAllowStubDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsAllowStubDirective.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: TemplateRef }\r\n];\r\nNgxPermissionsAllowStubDirective.propDecorators = {\r\n    ngxPermissionsOnly: [{ type: Input }],\r\n    ngxPermissionsOnlyThen: [{ type: Input }],\r\n    ngxPermissionsOnlyElse: [{ type: Input }],\r\n    ngxPermissionsExcept: [{ type: Input }],\r\n    ngxPermissionsExceptElse: [{ type: Input }],\r\n    ngxPermissionsExceptThen: [{ type: Input }],\r\n    ngxPermissionsThen: [{ type: Input }],\r\n    ngxPermissionsElse: [{ type: Input }],\r\n    ngxPermissionsOnlyAuthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsOnlyUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsExceptUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsExceptAuthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsAuthorisedStrategy: [{ type: Input }],\r\n    permissionsAuthorized: [{ type: Output }],\r\n    permissionsUnauthorized: [{ type: Output }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsRestrictStubDirective {\r\n    /**\r\n     * @param {?} viewContainer\r\n     */\r\n    constructor(viewContainer) {\r\n        this.viewContainer = viewContainer;\r\n        this.permissionsAuthorized = new EventEmitter();\r\n        this.permissionsUnauthorized = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.viewContainer.clear();\r\n        if (this.getUnAuthorizedTemplate()) {\r\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\r\n        }\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getUnAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyElse ||\r\n            this.ngxPermissionsExceptElse ||\r\n            this.ngxPermissionsElse;\r\n    }\r\n}\r\nNgxPermissionsRestrictStubDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgxPermissionsRestrictStubDirective.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\nNgxPermissionsRestrictStubDirective.propDecorators = {\r\n    ngxPermissionsOnly: [{ type: Input }],\r\n    ngxPermissionsOnlyThen: [{ type: Input }],\r\n    ngxPermissionsOnlyElse: [{ type: Input }],\r\n    ngxPermissionsExcept: [{ type: Input }],\r\n    ngxPermissionsExceptElse: [{ type: Input }],\r\n    ngxPermissionsExceptThen: [{ type: Input }],\r\n    ngxPermissionsThen: [{ type: Input }],\r\n    ngxPermissionsElse: [{ type: Input }],\r\n    ngxPermissionsOnlyAuthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsOnlyUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsExceptUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsExceptAuthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsUnauthorisedStrategy: [{ type: Input }],\r\n    ngxPermissionsAuthorisedStrategy: [{ type: Input }],\r\n    permissionsAuthorized: [{ type: Output }],\r\n    permissionsUnauthorized: [{ type: Output }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxRole {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} validationFunction\r\n     */\r\n    constructor(name, validationFunction) {\r\n        this.name = name;\r\n        this.validationFunction = validationFunction;\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPermissionsModule {\r\n    /**\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    static forRoot(config = {}) {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                NgxPermissionsStore,\r\n                NgxRolesStore,\r\n                NgxPermissionsConfigurationStore,\r\n                NgxPermissionsService,\r\n                NgxPermissionsGuard,\r\n                NgxRolesService,\r\n                NgxPermissionsConfigurationService,\r\n                { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },\r\n                { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },\r\n                { provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate },\r\n            ]\r\n        };\r\n    }\r\n    /**\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    static forChild(config = {}) {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },\r\n                { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },\r\n                { provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate },\r\n                NgxPermissionsConfigurationService,\r\n                NgxPermissionsService,\r\n                NgxRolesService,\r\n                NgxPermissionsGuard\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgxPermissionsModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [],\r\n                declarations: [\r\n                    NgxPermissionsDirective\r\n                ],\r\n                exports: [\r\n                    NgxPermissionsDirective\r\n                ]\r\n            },] }\r\n];\r\nclass NgxPermissionsAllowStubModule {\r\n}\r\nNgxPermissionsAllowStubModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [],\r\n                declarations: [\r\n                    NgxPermissionsAllowStubDirective\r\n                ],\r\n                exports: [\r\n                    NgxPermissionsAllowStubDirective\r\n                ]\r\n            },] }\r\n];\r\nclass NgxPermissionsRestrictStubModule {\r\n}\r\nNgxPermissionsRestrictStubModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [],\r\n                declarations: [\r\n                    NgxPermissionsRestrictStubDirective\r\n                ],\r\n                exports: [\r\n                    NgxPermissionsRestrictStubDirective\r\n                ]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxPermissionsAllowStubDirective, NgxPermissionsAllowStubModule, NgxPermissionsConfigurationService, NgxPermissionsConfigurationStore, NgxPermissionsDirective, NgxPermissionsGuard, NgxPermissionsModule, NgxPermissionsPredefinedStrategies, NgxPermissionsRestrictStubDirective, NgxPermissionsRestrictStubModule, NgxPermissionsService, NgxPermissionsStore, NgxRole, NgxRolesService, NgxRolesStore, USE_CONFIGURATION_STORE, USE_PERMISSIONS_STORE, USE_ROLES_STORE };\n"]}