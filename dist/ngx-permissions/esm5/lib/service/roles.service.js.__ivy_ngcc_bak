/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, InjectionToken } from '@angular/core';
import { BehaviorSubject, from, of } from 'rxjs';
import { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';
import { NgxRolesStore } from '../store/roles.store';
import { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';
import { NgxPermissionsService } from './permissions.service';
/** @type {?} */
export var USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');
var NgxRolesService = /** @class */ (function () {
    function NgxRolesService(isolate, rolesStore, permissionsService) {
        if (isolate === void 0) { isolate = false; }
        this.isolate = isolate;
        this.rolesStore = rolesStore;
        this.permissionsService = permissionsService;
        this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;
        this.roles$ = this.rolesSource.asObservable();
    }
    /**
     * @param {?} name
     * @param {?} validationFunction
     * @return {?}
     */
    NgxRolesService.prototype.addRole = /**
     * @param {?} name
     * @param {?} validationFunction
     * @return {?}
     */
    function (name, validationFunction) {
        var _a;
        /** @type {?} */
        var roles = tslib_1.__assign({}, this.rolesSource.value, (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
        this.rolesSource.next(roles);
    };
    /**
     * @param {?} rolesObj
     * @return {?}
     */
    NgxRolesService.prototype.addRoles = /**
     * @param {?} rolesObj
     * @return {?}
     */
    function (rolesObj) {
        var _this = this;
        Object.keys(rolesObj).forEach((/**
         * @param {?} key
         * @param {?} index
         * @return {?}
         */
        function (key, index) {
            _this.addRole(key, rolesObj[key]);
        }));
    };
    /**
     * @return {?}
     */
    NgxRolesService.prototype.flushRoles = /**
     * @return {?}
     */
    function () {
        this.rolesSource.next({});
    };
    /**
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.removeRole = /**
     * @param {?} roleName
     * @return {?}
     */
    function (roleName) {
        /** @type {?} */
        var roles = tslib_1.__assign({}, this.rolesSource.value);
        delete roles[roleName];
        this.rolesSource.next(roles);
    };
    /**
     * @return {?}
     */
    NgxRolesService.prototype.getRoles = /**
     * @return {?}
     */
    function () {
        return this.rolesSource.value;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxRolesService.prototype.getRole = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.rolesSource.value[name];
    };
    /**
     * @param {?} names
     * @return {?}
     */
    NgxRolesService.prototype.hasOnlyRoles = /**
     * @param {?} names
     * @return {?}
     */
    function (names) {
        /** @type {?} */
        var isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);
        if (isNamesEmpty)
            return Promise.resolve(true);
        names = transformStringToArray(names);
        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])
            .then((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), hasRoles = _b[0], hasPermissions = _b[1];
            return hasRoles || hasPermissions;
        }));
    };
    /**
     * @private
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.hasRoleKey = /**
     * @private
     * @param {?} roleName
     * @return {?}
     */
    function (roleName) {
        var _this = this;
        /** @type {?} */
        var promises = roleName.map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var hasValidationFunction = !!_this.rolesSource.value[key] &&
                !!_this.rolesSource.value[key].validationFunction &&
                isFunction(_this.rolesSource.value[key].validationFunction);
            if (hasValidationFunction && !isPromise(_this.rolesSource.value[key].validationFunction)) {
                /** @type {?} */
                var validationFunction_1 = (/** @type {?} */ (_this.rolesSource.value[key].validationFunction));
                return of(null).pipe(map((/**
                 * @return {?}
                 */
                function () { return validationFunction_1(); })), switchMap((/**
                 * @param {?} promise
                 * @return {?}
                 */
                function (promise) { return isBoolean(promise) ?
                    of((/** @type {?} */ (promise))) : (/** @type {?} */ (promise)); })), catchError((/**
                 * @return {?}
                 */
                function () { return of(false); })));
            }
            return of(false);
        }));
        return from(promises).pipe(mergeAll(), first((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data !== false; }), false), map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data !== false; }))).toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }));
    };
    /**
     * @private
     * @param {?} roles
     * @param {?} roleNames
     * @return {?}
     */
    NgxRolesService.prototype.hasRolePermission = /**
     * @private
     * @param {?} roles
     * @param {?} roleNames
     * @return {?}
     */
    function (roles, roleNames) {
        var _this = this;
        return from(roleNames).pipe(mergeMap((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (roles[key] && Array.isArray(roles[key].validationFunction)) {
                return from((/** @type {?} */ (roles[key].validationFunction))).pipe(mergeMap((/**
                 * @param {?} permission
                 * @return {?}
                 */
                function (permission) { return _this.permissionsService.hasPermission(permission); })), every((/**
                 * @param {?} hasPermissions
                 * @return {?}
                 */
                function (hasPermissions) { return hasPermissions === true; })));
            }
            return of(false);
        })), first((/**
         * @param {?} hasPermission
         * @return {?}
         */
        function (hasPermission) { return hasPermission === true; }), false)).toPromise();
    };
    NgxRolesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxRolesService.ctorParameters = function () { return [
        { type: Boolean, decorators: [{ type: Inject, args: [USE_ROLES_STORE,] }] },
        { type: NgxRolesStore },
        { type: NgxPermissionsService }
    ]; };
    return NgxRolesService;
}());
export { NgxRolesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxRolesService.prototype.rolesSource;
    /** @type {?} */
    NgxRolesService.prototype.roles$;
    /**
     * @type {?}
     * @private
     */
    NgxRolesService.prototype.isolate;
    /**
     * @type {?}
     * @private
     */
    NgxRolesService.prototype.rolesStore;
    /**
     * @type {?}
     * @private
     */
    NgxRolesService.prototype.permissionsService;
}
//# sourceMappingURL=data:application/json;base64,